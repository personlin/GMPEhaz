c--------------------Adjust E Version --------------------------------------------------

c ---------------------------------------------------------------------
C     *** Akkar, Sandikkaya, and Bommer (2013) *** Adjusted in Taiwan SSHAC Project
c ---------------------------------------------------------------------
      subroutine S04_ASB14_TW_E02 ( mag, Rbjf, specT,
     1                     period2, lnY, sigma, iflag, ftype, Vs, phiT, tauT )
      implicit none
      integer MAXPER
      parameter (MAXPER=22)
      REAL Period(MAXPER), a1(MAXPER), a3(MAXPER), a4(MAXPER), a8(MAXPER)
      Real a9(MAXPER), b1(MAXPER), b2(MAXPER), phi(MAXPER), tau(MAXPER)
      real specT, a1T, a3T, a4T, a8T, a9T, b1T, b2T, phiT, tauT, period2
      real mag, Rbjf, Ftype, Fn, Fr, Vs, lnY
      real a5, a6, a7, c1, c, n, sigma, period1, pgaref
      INTEGER iFlag, count1, count2, nPer, i
      real a2(MAXPER), a2T


      Data Period / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4/
      Data a1 / 2.03945675856391, 2.0105755214897, 2.09441962806437, 2.19342029563189, 2.31904682103906, 2.45390770646749,
     1      2.74068576984133, 3.02725901648496, 3.14444959319828, 3.27802577633879, 3.21237091996084, 3.11514512674121,
     1      2.95906158340172, 2.7808944616179, 2.37220179517804, 2.15108279768441, 1.3774519534676, 0.898857916754095,
     1      0.2513574194084, -0.248428626839261, -0.937137489057441, -1.4545229162242/
      Data a3 / -0.02807, -0.0274, -0.02715, -0.02403, -0.01797, -0.01248, -0.00532, -0.00925, -0.0149516924364565, -0.02193,
     1      -0.0274510958074301, -0.03462, -0.0467825076620119, -0.05672, -0.07684, -0.0949, -0.12347, -0.14345, -0.17187,
     1      -0.19029, -0.21392, -0.23848/
      Data a4 / -1.23452, -1.23698, -1.25363, -1.27525, -1.30123, -1.32632, -1.35722, -1.38182, -1.37407684986153, -1.3646,
     1      -1.33160829826025, -1.28877, -1.22380239685518, -1.17072, -1.0653, -1.01909, -0.88393, -0.81838, -0.75751, -0.72033,
     1      -0.69085, -0.66482/
      Data a8 / 0.104553265468639, 0.0120117886289134, 0.00735113146215132, -0.000968056992192673, 0.00592806686242958,
     1      0.000506378970806889, 0.0195584168540039, 0.0199008069526318, 0.0711615823806575, 0.0909863018067894,
     1      0.122980430881693, 0.122293459202686, 0.0815956680067303, 0.0826805756231909, 0.0464275875594828, -0.0224107102290375,
     1      -0.0530221693454976, -0.0518991410288072, -0.0838484024943528, -0.129115027502304, -0.149034891946652,
     1      -0.176695513944899/
      Data a9 / 0.248308147882621, 0.226557955393241, 0.227183473276702, 0.224971695893834, 0.231865222854536, 0.233678929149701,
     1      0.231586777371364, 0.24429370127944, 0.250876857540622, 0.239927616870316, 0.243232642934037, 0.252967738138007,
     1      0.244561507444697, 0.23142234226282, 0.196576492581241, 0.162932138512573, 0.163598922854411, 0.16397439996027,
     1      0.136763456368592, 0.10290935123472, 0.020715592797924, -0.0518151815751219/
      Data b1 / -0.50847449458028, -0.538549867425188, -0.530969716151637, -0.51477742792559, -0.4874004233809, -0.454349946166605,
     1      -0.398928162316836, -0.447336306798626, -0.477689733960318, -0.529059553231679, -0.556558326532214, -0.578103741261652,
     1      -0.59884406919878, -0.660851743331629, -0.696131436888087, -0.707234728955517, -0.830868141852288, -0.937681728021304,
     1      -1.00546910992409, -0.977458388978301, -0.98301709636186, -0.97009213939352/
      Data b2 / -0.28846, -0.28685, -0.28241, -0.26842, -0.24759, -0.22385, -0.17525, -0.29293, -0.339056152218589, -0.39551,
     1      -0.417668345900112, -0.44644, -0.452416689285495, -0.4573, -0.43008, -0.37408, -0.28957, -0.28702, -0.24695, -0.17336,
     1      -0.13336, -0.07749/
      Data phi / 0.6201, 0.6215, 0.6266, 0.641, 0.6534, 0.6622, 0.6626, 0.667, 0.672665719613514, 0.6796, 0.673030374571143,
     1      0.6645, 0.661968437319219, 0.6599, 0.6697, 0.6512, 0.6744, 0.6787, 0.7164, 0.7254, 0.6997, 0.6196/
      Data tau / 0.3501, 0.3526, 0.3555, 0.3565, 0.3484, 0.3551, 0.3759, 0.4067, 0.39887591100991, 0.3893, 0.387081119888267,
     1      0.3842, 0.382769116745646, 0.3816, 0.3962, 0.4021, 0.4043, 0.3943, 0.3799, 0.3717, 0.4046, 0.3566/
      Data a2(1:22) / 0.156596, 0.179855, 0.176579, 0.171114, 0.173395, 0.163795, 0.154743, 0.154450, 0.172438, 0.217818,
     1      0.219640, 0.225918, 0.245985, 0.270563, 0.256632, 0.238360, 0.233643, 0.262352, 0.256889, 0.220679, 0.190910,
     1      0.080137  /



C First check for the PGA case (i.e., specT=0.0)
      nPer = 22
      if (specT .eq. 0.0) then
         period1 = period(1)
         a1T = a1(1)
         a2T = a2(1)
         a3T = a3(1)
         a4T = a4(1)
         a8T = a8(1)
         a9T = a9(1)
         b1T = b1(1)
         b2T = b2(1)
         phiT = phi(1)
         tauT = tau(1)
         goto 1011
      elseif (specT .gt. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=2,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020
            endif
         enddo
      endif
C Selected spectral period is outside range defined by attenuaton model.
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
      return
C Interpolate the coefficients for the requested spectral period.
 1020       call S24_interp (period(count1),period(count2),a1(count1),a1(count2),
     +                   specT,a1T,iflag)
            call S24_interp (period(count1),period(count2),a2(count1),a2(count2),
     +                   specT,a2T,iflag)
            call S24_interp (period(count1),period(count2),a3(count1),a3(count2),
     +                   specT,a3T,iflag)
            call S24_interp (period(count1),period(count2),a4(count1),a4(count2),
     +                   specT,a4T,iflag)
            call S24_interp (period(count1),period(count2),a8(count1),a8(count2),
     +                   specT,a8T,iflag)
            call S24_interp (period(count1),period(count2),a9(count1),a9(count2),
     +                   specT,a9T,iflag)
            call S24_interp (period(count1),period(count2),b1(count1),b1(count2),
     +                   specT,b1T,iflag)
            call S24_interp (period(count1),period(count2),b2(count1),b2(count2),
     +                   specT,b2T,iflag)
            call S24_interp (period(count1),period(count2),phi(count1),phi(count2),
     +                   specT,phiT,iflag)
            call S24_interp (period(count1),period(count2),tau(count1),tau(count2),
     +                   specT,tauT,iflag)
 1011 period1 = specT
C.....Set the mechanism terms based on ftype............
C     Set mechanism term and corresponding Frv and Fnm values.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C      -1       Normal                    -120 < Rake <  -60
C     -0.5      Normal/Oblique            -150 < Rake < -120
C                                          -60 < Rake <  -30
C       0       Strike-Slip               -180 < Rake < -150
C                                          -30 < Rake <   30
C                                          150 < Rake <  180
C      0.5      Reverse/Oblique             30 < Rake <   60
C                                          120 < Rake <  150
C       1       Reverse                     60 < Rake <  120
      if (ftype .eq. -1.0) then
         Fr = 0.0
         Fn = 1.0
      elseif (ftype .eq. -0.5) then
         Fr = 0.0
         Fn = 1.0
      elseif (ftype .eq. 0.0) then
         Fr = 0.0
         Fn = 0.0
      elseif (ftype .eq. 0.5) then
         Fr = 1.0
         Fn = 0.0
      elseif (ftype .eq. 1.0) then
         Fr = 1.0
         Fn = 0.0
      endif
C     Set frequency independent terms
c      a2 = 0.0029
      a5 = 0.2529
      a6 = 7.5
      a7 = -0.5096
      c1 = 6.75
      c = 2.5
      n = 3.2
C     Compute the PGA for reference Vs=750m/s.
      if (mag .lt. c1 ) then
         pgaref = a1(1) + a2(1)*(mag-c1) + a3(1)*(8.5-mag)**2.0 +
     1                 (a4(1)+a5*(mag-c1))*alog(sqrt(Rbjf*Rbjf+a6*a6)) +
     2                  a8(1)*Fn + a9(1)*Fr
      else
         pgaref = a1(1) + a7*(mag-c1) + a3(1)*(8.5-mag)**2.0 +
     1                 (a4(1)+a5*(mag-c1))*alog(sqrt(Rbjf*Rbjf+a6*a6)) +
     2                  a8(1)*Fn + a9(1)*Fr
      endif
      pgaref = exp(pgaref)
C.....Now compute the ground motion value........
      if (mag .lt. c1 ) then
         lnY = a1T + a2T*(mag-c1) + a3T*(8.5-mag)**2.0 +
     1                 (a4T+a5*(mag-c1))*alog(sqrt(Rbjf*Rbjf+a6*a6)) +
     2                  a8T*Fn + a9T*Fr
      else
         lnY = a1T + a7*(mag-c1) + a3T*(8.5-mag)**2.0 +
     1                 (a4T+a5*(mag-c1))*alog(sqrt(Rbjf*Rbjf+a6*a6)) +
     2                  a8T*Fn + a9T*Fr
      endif
C.....Now apply site amplification term......
      if (vs .le. 750.0) then
         lnY = lnY + b1T*alog(Vs/750.0) +
     1         b2T*alog( (pgaref + c*(Vs/750.0)**n) / ((pgaref+c)*(Vs/750.0)**n) )
      else
         lnY = lnY + b1T*alog( min(Vs,1000.0)/750.0)
      endif
C.....Set Sigma value.........
      sigma = sqrt (phiT*phiT + tauT*tauT)
C     Convert ground motion to units of gals.
      lnY = lnY + 6.89
      period2 = period1
      return
      END


c ---------------------------------------------------------------------
C     *** Bindi (2014) *** Adjusted in Taiwan SSHAC Project
c ---------------------------------------------------------------------

      Subroutine S04_Bindi14_TW_E02 ( m, jbDist, ftype, specT,
     1                     period2, lnY, sigma, iflag, vs, phiT, tauT )
      implicit none
      integer MAXPER
      parameter (MAXPER=21)
      REAL Period(MAXPER), e1(MAXPER), c1(MAXPER), c2(MAXPER), h(MAXPER)
      REAL c3(MAXPER), b1(MAXPER), b2(MAXPER), b3(MAXPER), gamma(MAXPER)
      REAL sofN(MAXPER), sofR(MAXPER), sofS(MAXPER), phi(MAXPER), tau(MAXPER), sig(MAXPER), sigs2s(MAXPER)
      real e1T, c1T, c2T, hT, c3T, b1T, b2T, b3T, gammaT, sofNT, sofRT, sofST, sigs2sT
      real phiT, tauT, sigT, period1
      real Rref, Mref, Mh, R, Vref, vs

      REAL M, jbDist, specT, sigma, termsof
      REAL period2, lnY, ftype
      integer iflag, count1, count2, nPer, i
      real f_D, f_M, f_S


      Data period / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3/
      Data e1 / 0.602962884594764, 0.602962884594764, 0.621561504845865, 0.726381825288257, 0.830096762727687, 0.938766589905189,
     1      1.22302346770631, 1.39715735313782, 1.39063856362439, 1.33235570611944, 1.33153232812115, 1.31633816650828,
     1      1.26708499354147, 1.27951948079044, 1.0912836412466, 0.789633867906657, 0.45939097848205, 0.383689218228279,
     1      -0.238839681034164, -0.775967717654436, -1.62622126714907/
      Data c1 / -1.26358, -1.26358, -1.26358, -1.29088019990866, -1.31025, -1.30237878943392, -1.28882132582112, -1.28178,
     1      -1.23465110534188, -1.17697, -1.14479188763455, -1.10301, -1.08792194443592, -1.10591, -1.09538, -1.05767,
     1      -1.04831378793046, -1.0527, -0.983388, -0.979215, -0.940373/
      Data c2 / 0.220527, 0.220527, 0.220527, 0.234653259429915, 0.244676, 0.239572871690745, 0.229465497782482, 0.219406,
     1      0.202883682422306, 0.182662, 0.161122330083983, 0.133154, 0.118226690912901, 0.108276, 0.101111, 0.112197,
     1      0.122345650356548, 0.103471, 0.109072, 0.163344, 0.227241/
      Data h / 5.20082, 5.20082, 5.20082, 5.0346146046701, 4.91669, 5.09314627212803, 5.50666272693079, 6.12146, 5.95062506384396,
     1      5.74154, 5.55812998041133, 5.31998, 5.16226984536375, 5.12846, 4.95386, 4.43205, 4.18619685740845, 4.41613, 4.56697,
     1      4.58186, 5.74173/
      Data c3 / -0.00125182256184671, -0.00125182256184671, -0.00133789871642764, -0.00145781319421002, -0.00173468008070477,
     1      -0.00246123088762426, -0.00381606405587413, -0.00435108777453373, -0.0047057194777153, -0.00460999914182417,
     1      -0.0043200209052312, -0.00390394298744224, -0.00275425145452962, -0.00158999623017042, -0.000272441818527292,
     1      0.000164300223313353, 0.000502999605010327, 0.000398719751676808, -0.000948565808555795, -0.0024781223824519,
     1      -0.00322395485836136/
      Data b1 / -0.264028732682727, -0.264028732682727, -0.277024473197614, -0.283451417352844, -0.308005433242966,
     1      -0.284467972471899, -0.246398118410714, -0.314858885881003, -0.303807335017873, -0.280546390151647, -0.186148612791909,
     1      -0.0609586208135754, -0.0377024981203794, -0.00172994133464409, 0.00469921518191794, 0.0572336411166358,
     1      0.317560454195245, 0.655123906459053, 0.893461205087385, 0.806835366863026, 0.969592203201732/
      Data b2 / -0.210951794, -0.210951794, -0.210951794, -0.193123478297033, -0.180474087, -0.1608422730442, -0.139406648252206,
     1      -0.173459492, -0.201518836635462, -0.235860699, -0.238616639899499, -0.24219511, -0.285257767788449, -0.319087637,
     1      -0.373226018, -0.377872634, -0.365550259031872, -0.339764851, -0.322055669, -0.341431923, -0.256611596/
      Data b3 / 0, 0, 0, 0, 0, 0, 0, 0, 0.0765190098116516, 0.170170709, 0.246865015286964, 0.346449256, 0.402141459151449,
     1      0.436758946, 0.517683299, 0.356325043, 0.186190244791055, 0.213765783, 0.227350805, 0, 0/
      Data gamma / -0.420010505364829, -0.420010505364829, -0.413347035937856, -0.402883815827122, -0.383986069840125,
     1      -0.361691454954229, -0.32852135916708, -0.33282648363129, -0.345703356657057, -0.372689074563319, -0.391727413988005,
     1      -0.402371664144613, -0.419633565670697, -0.47940685364329, -0.525072668541241, -0.554508489346, -0.715799389410168,
     1      -0.828844831674151, -0.915855863015358, -0.922171987503322, -0.937731571051244/
      Data sofN / -0.0341137359074037, -0.0341137359074037, -0.0392742814171438, -0.0368435752483731, -0.0242782024245241,
     1      -0.0321899120452947, -0.0235686801843898, -0.0462006347636813, -0.00702791404031222, 0.00122126989570676,
     1      0.0312035502188266, 0.0277947946911042, -0.0203490413230642, -0.0236806245379859, -0.0647608232700541,
     1      -0.119553289633279, -0.129207746499647, -0.120818803004753, -0.14582252672715, -0.185290984847367, -0.170081819191526/
      Data sofR / 0.188104514724646, 0.188104514724646, 0.186927382190412, 0.192042043686743, 0.203145831357016, 0.20436206557435,
     1      0.200592230823518, 0.201020548031326, 0.200999016576307, 0.178429474522643, 0.179943044142034, 0.187213636902413,
     1      0.173592950213276, 0.158653833000087, 0.123383881665229, 0.0949571434239225, 0.119199060471125, 0.132643796729745,
     1      0.118405804003951, 0.103287532691844, 0.0373650184045664/
      Data sofS / -0.096283977, -0.096283977, -0.096283977, -0.0966103375235148, -0.096841894, -0.0963783235595202,
     1      -0.0979532926457108, -0.107435167, -0.101695221063626, -0.094670095, -0.0968825621131357, -0.099755355,
     1      -0.0954761145312324, -0.090850567, -0.108074134, -0.098696165, -0.0876704883298241, -0.103411629, -0.096162861,
     1      -0.058467241, -0.005358461/
      Data tau / 0.365351177, 0.365351177, 0.365351177, 0.359897473917039, 0.35602801, 0.372705149349208, 0.396474106671501,
     1      0.390727967, 0.373344954217707, 0.352069866, 0.349217752310341, 0.345514406, 0.347774367936185, 0.363684105,
     1      0.363182142, 0.416353437, 0.435717323627481, 0.44906396, 0.409289105, 0.379829832, 0.406512188/
      Data phi / 0.650148717, 0.650148717, 0.650148717, 0.661984155059029, 0.670381532, 0.670708390598036, 0.675863668060965,
     1      0.695304713, 0.699277470177307, 0.704139732, 0.698434503079109, 0.69102651, 0.69555035047304, 0.684793412, 0.683849352,
     1      0.667650666, 0.665568654301517, 0.685956217, 0.728335296, 0.759659664, 0.723391646/
      Data sigs2s / 0.423581251, 0.423581251, 0.423581251, 0.428228145723766, 0.43152517, 0.443005623288873, 0.463997900223042,
     1      0.479347559, 0.483433172815405, 0.48843356, 0.466739664863982, 0.43857108, 0.431849944902504, 0.400921511, 0.391170063,
     1      0.380133773, 0.387723196000042, 0.462301522, 0.503273721, 0.518887551, 0.477203853/
      Data sig / 0.745772773, 0.745772773, 0.745772773, 0.753543188479092, 0.759056386, 0.767508805717544, 0.783602925138285,
     1      0.797567122, 0.792929650007148, 0.787253843, 0.780874405181787, 0.772590981, 0.777647499576309, 0.775374807,
     1      0.77430871, 0.78683247, 0.795506751916842, 0.819874566, 0.835458462, 0.84932463, 0.829789498/

C Find the requested spectral period and corresponding coefficients
      nPer = 21
C First check for the PGA case (i.e., specT=0.0)
      if (specT .eq. 0.0) then
         period1  = period(1)
         e1T      = e1(1)
         c1T      = c1(1)
         c2T      = c2(1)
         hT       = h(1)
         c3T      = c3(1)
         b1T      = b1(1)
         b2T      = b2(1)
         b3T      = b3(1)
         gammaT   = gamma(1)
         sofNT    = sofN(1)
         sofRT    = sofR(1)
         sofST    = sofS(1)
         sigs2sT  = sigs2s(1)
         phiT     = phi(1)
         tauT     = tau(1)
         sigT     = sig(1)
         goto 1011
      elseif (specT .gt. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=2,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020
            endif
         enddo
      endif
C Selected spectral period is outside range defined by attenuaton model.
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
      return
C Interpolate the coefficients for the requested spectral period.
 1020 call S24_interp (period(count1),period(count2),e1(count1),e1(count2),
     +             specT,e1T,iflag)
      call S24_interp (period(count1),period(count2),c1(count1),c1(count2),
     +             specT,c1T,iflag)
      call S24_interp (period(count1),period(count2),c2(count1),c2(count2),
     +             specT,c2T,iflag)
      call S24_interp (period(count1),period(count2),h(count1),h(count2),
     +             specT,hT,iflag)
      call S24_interp (period(count1),period(count2),c3(count1),c3(count2),
     +             specT,c3T,iflag)
      call S24_interp (period(count1),period(count2),b1(count1),b1(count2),
     +             specT,b1T,iflag)
      call S24_interp (period(count1),period(count2),b2(count1),b2(count2),
     +             specT,b2T,iflag)
      call S24_interp (period(count1),period(count2),b3(count1),b3(count2),
     +             specT,b3T,iflag)
      call S24_interp (period(count1),period(count2),gamma(count1),gamma(count2),
     +             specT,gammaT,iflag)
      call S24_interp (period(count1),period(count2),sofN(count1),sofN(count2),
     +             specT,sofNT,iflag)
      call S24_interp (period(count1),period(count2),sofR(count1),sofR(count2),
     +             specT,sofRT,iflag)
      call S24_interp (period(count1),period(count2),sofS(count1),sofS(count2),
     +             specT,sofST,iflag)
      call S24_interp (period(count1),period(count2),sigs2s(count1),sigs2s(count2),
     +             specT,sigs2sT,iflag)
      call S24_interp (period(count1),period(count2),phi(count1),phi(count2),
     +             specT,phiT,iflag)
      call S24_interp (period(count1),period(count2),tau(count1),tau(count2),
     +             specT,tauT,iflag)
      call S24_interp (period(count1),period(count2),sig(count1),sig(count2),
     +             specT,sigT,iflag)

 1011 period1 = specT
C     Set Constant Terms
      Mref = 5.5
      Rref = 1.0
      Mh = 6.75
      Vref = 800.0
C     Set the mechanism term.
      if (ftype .eq. 0 ) then
         termsof = 0
      elseif (ftype .ge. 0.5) then
         termsof = sofRT
      elseif (ftype .le. -0.5) then
         termsof = sofNT
      endif
      R = sqrt (jbdist**2 + hT**2)
	    f_D = (c1T+c2T*(M-Mref))*alog(R/Rref) + c3T*(R-Rref)
C     Compute the ground motion for the given spectral period.
      if (M .le. Mh) then
         f_M = b1T*(M-Mh) + b2T*(M-Mh)**2.0
      else
         f_M = b3T*(M-Mh)
      endif

	    f_S = gammaT*alog(vs/vref)

	    lnY = e1T + f_D + f_M + f_S + termsof

C     Set the sigma value and convert from log10 to Ln units
c      phiT = phiT*alog(10.0)
c      tauT = tauT*alog(10.0)
      sigma = sigT
c      sigs2sT = sigs2sT*alog(10.0)
C     Convert ground motion to units of gals in natural log units.
c      lnY = lnY*alog(10.0)
      lnY = lnY + 6.89
      period2 = period1
      return
      end


c ------------------------------------------------------------------
C *** Abrahamson, Silva, and Kamai (NGA-West2 2013) Horizontal ****
C     Earthquake Spectra Paper:
C        Summary of the Abrahamson, Silva, and Kamai NGA-West2
C            Ground-Motion Relations for Active Crustal REgions
C         N. A. Abrahamson, S. J. Silva, and R. Kamai
C     Notes:
C        Applicable Range (see Abstract):
C           3 <= M <= 8.5
C           Rrup <= 300 km
C        Regional attenuation included based on Regionflag
C             0 = Global
C             1 = Taiwan
C             2 = China
C             3 = Japan
C         Mainshock and Aftershocks included based on MSASFlag
C             0 = Mainshocks
C             1 = Aftershocks
C         Sigma dependent on estimated or measured Vs30m based on
C             Vs30_Class
C             0 = Estimated Vs30m
C             1 = Measured Vs30m
c ------------------------------------------------------------------
      subroutine S04_ASK14_TW_E03 ( mag, dip, fType, fltWidth, rRup, Rjb,
     1                     vs30, hwflag, lnY, sigma, specT, period2, ztor,
     2                     iflag, vs30_class, z10, Rx, Ry0, regionflag, msasflag,
     1                     phi, tau )
C     Last Updated: 8/1/13
      implicit none

      real mag, dip, fType, rRup, rjb, Rx, Ry0, vs30, SA1180,
     1      Z10,  ZTOR, fltWidth, lnSa, sigma, lnY, vs30_rock
      real Fn, Frv, specT, period2, CRjb, phi, tau, z10_rock, SA_rock
      integer hwflag, iflag, vs30_class, regionflag, msasflag

c     Vs30 class is to distinguish between the sigma if the Vs30 is measured
c     vs the VS30 being estimated from surface geology.
c         Vs30_class = 0 for estimated
c         Vs30_class = 1 for measured

C     Current version is not programmed for Aftershock cases.
C       For implementation of Aftershock a new distance metric, CRjb
C       will need to be computed and passed along to this subroutine.

      CRjb = 999.9

C     Set mechanism term and corresponding Frv and Fnm values.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C      -1       Normal                   -120 < Rake < -60.0
C     1, 0.5    Reverse and Rev/Obl        30 < Rake < 150.0
C     0,-0.5    Strike-Slip and NMl/Obl        Otherwise
C
      if ( fType .eq. 1.0 ) then
        Frv = 1.0
        Fn = 0.0
      elseif ( fType .eq. 0.5 ) then
        Frv = 1.0
        Fn = 0.0
      elseif ( fType .eq. -1.0 ) then
        Frv = 0.0
        Fn = 1.0
      elseif ( fType .eq. -0.5 ) then
        Frv = 0.0
        Fn = 1.0
      else
        Frv = 0.0
        Fn = 0.0
      endif

c     Compute SA1180
      vs30_rock = 1180.
      z10_rock = 0.005
      SA_rock = 0.

      call S04_ASK14_TW_E03_model ( mag, dip, fltWidth, ZTOR, Frv, Fn, rRup, rjb, rx, Ry0,
     1                     vs30_rock, SA_rock, Z10_rock, hwflag, vs30_class,
     2                     specT, lnSa, phi, tau, iflag, regionflag, msasflag, CRjb )
      Sa1180 = exp(lnSa)

c     Compute Sa at spectral period for given Vs30

      call S04_ASK14_TW_E03_model ( mag, dip, fltWidth, ZTOR, Frv, Fn, rRup, rjb, rx, Ry0,
     1                     vs30, SA1180, Z10, hwflag, vs30_class,
     2                     specT, lnSa, phi, tau, iflag, regionflag, msasflag, CRjb )

c     compute Sa (given the PGA rock value)
      sigma = sqrt( phi**2 + tau**2 )

      lnY = lnSa + 6.89

      period2 = specT

      return
      end

c ----------------------------------------------------------------------
      subroutine S04_ASK14_TW_E03_model ( mag, dip, FltWidth, ZTOR, Frv, Fn, rRup, rjb, Rx, Ry0,
     1                     vs30, Sa1180, Z1, hwflag, vs30_class,
     3                     specT, lnSa, phi, tau, iflag, regionflag, msasflag, CRjb)

      implicit none

      integer MAXPER
      parameter (MAXPER=25)
      real Vlin(MAXPER), b(MAXPER), c4(MAXPER), M1(MAXPER), a1(MAXPER)
      real a2(MAXPER), a3(MAXPER), a6(MAXPER), a8(MAXPER), a10(MAXPER)
      real a11(MAXPER), a12(MAXPER), a13(MAXPER), a14(MAXPER), a15(MAXPER)
      real a17(MAXPER), a43(MAXPER), a44(MAXPER), a45(MAXPER), a46(MAXPER)
      real a25(MAXPER), a28(MAXPER), a29(MAXPER), a31(MAXPER), a36(MAXPER)
      real a37(MAXPER), a38(MAXPER), a39(MAXPER), a40(MAXPER), a41(MAXPER), a42(MAXPER)
      real s1est(MAXPER), s2est(MAXPER), s1msr(MAXPER), s2msr(MAXPER)
      real s3(MAXPER), s4(MAXPER), s5(MAXPER), s6(MAXPER), period(MAXPER)
      real a4(MAXPER), a5, a7
      real VlinT, bT, c4T, M1T, a1T
      real a2T, a3T, a6T, a8T, a10T, a4T
      real a11T, a12T, a13T, a14T, a15T
      real a17T, a43T, a44T, a45T, a46T
      real a25T, a28T, a29T, a31T, a36T
      real a37T, a38T, a39T, a40T, a41T, a42T
      real s1estT, s2estT, s1msrT, s2msrT
      real s3T, s4T, s5T, s6T, c4_mag
      real phiA_est, phiA_msr, period1

      real M2
      real lnSa, SA1180, rjb, rRup, Rx, Ry0, dip, mag, vs30
      real HW_taper1, HW_taper2, HW_taper3, HW_taper4, HW_taper5
      real damp_dSA1180, sigAmp, fltWidth
      real f1, f4, f5, f6, f7, f8, f10, f11, fReg, f12, f13
      real Ry1, ZTOR, Frv, Fn, SpecT
      real phiA, phiB, tauA, tauB, phi, tau
      integer vs30_class, hwflag, iflag, nPer, regionflag, msasflag
      real n, c, z1, z1_ref
      real R, V1, Vs30Star, hw_a2, h1, h2, h3, R1, R2, CRjb
      integer count1, count2, i
      real y1, y2, x1, x2, y1z, y2z, x1z, x2z


      Data Period / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4,
     1      5, 7.5, 10/
      Data Vlin / 660, 660, 680, 770, 851.659765220817, 915, 960, 910, 833.557751246246, 740, 674.738820243143, 590, 495, 430, 360,
     1      340, 330, 330, 330, 330, 330, 330, 330, 330, 330/
      Data b / -1.47, -1.47, -1.459, -1.39, -1.2936977941189, -1.219, -1.152, -1.23, -1.39052872238288, -1.587, -1.77190667597776,
     1      -2.012, -2.411, -2.757, -3.278, -3.599, -3.8, -3.5, -2.4, -1, 0, 0, 0, 0, 0/
      Data c4 / 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5,
     1      4.5, 4.5/
      Data M1 / 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75,
     1      6.75, 6.82, 6.92, 7, 7.15, 7.25/
      Data a1 / 0.515752059105666, 0.515752059105666, 0.525965272598101, 0.551232209070966, 0.579804327267391, 0.634993029400247,
     1      0.883852047776952, 1.05080201084861, 1.17945339477789, 1.26593036089864, 1.30919277345635, 1.359730302838,
     1      1.50077522112501, 1.59564384622605, 1.51277593451914, 1.43908031259574, 1.3196502459015, 1.2063286269123,
     1      0.949663235267868, 0.750639640295542, 0.337153706963871, 0.0754357515863762, -0.207939424723418, -1.22376727970931,
     1      -2.08785274897304/
      Data a2 / -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.79,
     1      -0.79, -0.79, -0.79, -0.79, -0.79, -0.79, -0.765, -0.634, -0.529/
      Data a3 / 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275,
     1      0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275, 0.275/
      Data a4(1:25) / 0.0495698, 0.0495698, 0.0390541, 0.0255496, -0.007645, -0.030922, -0.061750, -0.081645, -0.073836,
     1               -0.062996, -0.051664, -0.044848, 0.0133874, 0.0809235, 0.1084020, 0.1504476, 0.1442501,
     1               0.2095746, 0.3581460, 0.4368578, 0.3650917, 0.2733890, 0.2247384, 0.0816875, -0.104597/
      Data a6 / 1.23717748598244, 1.23717748598244, 1.21929244416125, 1.18776475236154, 1.1386198050469, 1.06637205570935,
     1      1.02389263942901, 1.07752774917395, 1.1812142280341, 1.27818420722981, 1.33346592714088, 1.41780002102162,
     1      1.55359352494286, 1.66821078559092, 1.82895235653472, 1.92716558892461, 2.23060244069684, 2.47207263637695,
     1      2.65903360278295, 2.76456465596202, 2.81455506509579, 2.86433089087378, 2.78708834917703, 2.27921975558958,
     1      1.41525726709607/
      Data a8 / -0.015, -0.015, -0.015, -0.015, -0.015, -0.015, -0.015, -0.015, -0.0181476220075075, -0.022, -0.0254805962536991,
     1      -0.03, -0.038, -0.045, -0.055, -0.065, -0.095, -0.11, -0.124, -0.138, -0.172, -0.197, -0.218, -0.255, -0.285/
      Data a10 / 1.89083492480792, 1.89083492480792, 1.87460135247031, 1.76211350257916, 1.61443183119401, 1.50363187017527,
     1      1.4090869756904, 1.47890076707259, 1.63332017493193, 1.82597122248374, 2.07773336055039, 2.42097852808943,
     1      3.03179342267475, 3.33576148779323, 4.13356936485604, 4.65243364489275, 4.87770413836195, 4.34778741199272,
     1      2.68122643944686, 0.675958400923867, -0.701731284520998, -0.681551288424886, -0.675729625257139, -0.715692117050037,
     1      -0.76096582037326/
      Data a11 / 0.0204898906386533, 0.0204898906386533, 0.0221041041712509, 0.0216820961375558, 0.0348706632203091,
     1      0.0420746347091259, 0.0593187964347741, 0.0817510779375231, 0.114137690473519, 0.128772315620918, 0.137560367749909,
     1      0.139072825872178, 0.137079592197487, 0.151473534772405, 0.0851888969474017, 0.023694753084204, 0.0511085267557186,
     1      0.0590746772575226, 0.0538160326818372, 0.0272210601385645, -0.0290399691465416, -0.084284975099982,
     1      -0.138189866483548, -0.225041479336417, -0.173841111661655/
      Data a12 / -0.0434881906880183, -0.0434881906880183, -0.0406064297893105, -0.0360572370481667, -0.00450128728753472,
     1      0.0175844682739117, 0.0415661398017674, -0.00940639550634408, 0.0377318270533452, 0.0504726922720043,
     1      0.102654347142401, 0.102315899582994, 0.0212337142422029, 0.0226318694825402, 0.00382205344070005, -0.0558206573265485,
     1      -0.102934247138437, -0.117317479408773, -0.144610004682186, -0.194298490614156, -0.209597487336665, -0.219820299126258,
     1      -0.391508524187674, -0.243508338360703, -0.389377983928878/
      Data a13 / 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.58, 0.56, 0.53, 0.5, 0.42, 0.35, 0.2, 0,
     1      0, 0, 0/
      Data a14 / -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.24, -0.19, -0.11, -0.04, 0.07, 0.15,
     1      0.27, 0.35, 0.46, 0.54, 0.61, 0.72, 0.8/
      Data a15 / 0.952886534345006, 0.952886534345006, 0.945485578184931, 0.924040323141569, 0.911895250528834, 0.926379261832576,
     1      0.913774531356106, 0.928600111926654, 0.938643840034865, 0.956069292534134, 0.988813836565905, 0.997918632289772,
     1      0.961361805536286, 0.948242197134087, 0.987444458169033, 0.989386698853271, 0.865419045408074, 0.812275301247927,
     1      0.699815092188431, 0.665629217476703, 0.462283418340137, 0.329492634149113, 0.26821523588858, 0.18175093025376,
     1      0.0425866525919946/
      Data a17 / -0.00797507454784998, -0.00797507454784998, -0.00811713628445259, -0.0088371482560873, -0.00944700779246997,
     1      -0.010056910806905, -0.0108414565925128, -0.0106900501055218, -0.0103707000297666, -0.00916470944805998,
     1      -0.00845544209662438, -0.00738040686016529, -0.00615546315315055, -0.00534167482845196, -0.00386413815130589,
     1      -0.00286182573942047, -0.00312552599477905, -0.00390018562669184, -0.00378727984340934, -0.00485179523035504,
     1      -0.00336928957584865, -0.00237403743233928, -0.00209352593747079, -0.00294860514044089, -0.00344279044006146/
      Data a25 / -0.0015, -0.0015, -0.0015, -0.0016, -0.00182526831785053, -0.002, -0.0027, -0.0033, -0.00338993205735736, -0.0035,
     1      -0.00341298509365752, -0.0033, -0.0029, -0.0027, -0.0023, -0.002, -0.001, -5e-04, -4e-04, -2e-04, 0, 0, 0, 0, 0/
      Data a28 / 0.0025, 0.0025, 0.0024, 0.0023, 0.00252526831785053, 0.0027, 0.0032, 0.0036, 0.00346510191396396, 0.0033,
     1      0.00303895528097257, 0.0027, 0.0024, 0.002, 0.001, 8e-04, 7e-04, 7e-04, 6e-04, 3e-04, 0, 0, 0, 0, 0/
      Data a29 / -0.0034, -0.0034, -0.0033, -0.0034, -0.00334368292053737, -0.0033, -0.0029, -0.0025, -0.0025, -0.0025,
     1      -0.00276104471902743, -0.0031, -0.0036, -0.0039, -0.0048, -0.005, -0.0041, -0.0032, -0.002, -0.0017, -0.002, -0.002,
     1      -0.002, -0.002, -0.002/
      Data a31 / -0.1503, -0.1503, -0.1479, -0.1447, -0.137885633385021, -0.1326, -0.1353, -0.1128, -0.0448563306665158, 0.0383,
     1      0.0553549216431254, 0.0775, 0.0741, 0.2548, 0.2136, 0.1542, 0.0787, 0.0476, -0.0163, -0.1203, -0.2719, -0.2958,
     1      -0.2718, -0.14, -0.0216/
      Data a36 / 0.265, 0.265, 0.255, 0.249, 0.222530972652563, 0.202, 0.126, 0.022, -0.049046325312313, -0.136,
     1      -0.110765677160682, -0.078, 0.037, -0.091, 0.129, 0.31, 0.505, 0.358, 0.131, 0.123, 0.109, 0.135, 0.189, 0.15, 0.092/
      Data a37 / 0.337, 0.337, 0.328, 0.32, 0.302541705366584, 0.289, 0.275, 0.256, 0.213731933042042, 0.162, 0.188974620966168,
     1      0.224, 0.248, 0.203, 0.232, 0.252, 0.208, 0.208, 0.108, 0.068, -0.023, 0.028, 0.031, -0.07, -0.159/
      Data a38 / 0.188, 0.188, 0.184, 0.18, 0.172678779669858, 0.167, 0.173, 0.189, 0.15257751677027, 0.108, 0.111045521721987,
     1      0.115, 0.122, 0.096, 0.123, 0.134, 0.129, 0.152, 0.118, 0.119, 0.093, 0.084, 0.058, 0, -0.05/
      Data a39 / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/
      Data a40 / 0.088, 0.088, 0.088, 0.093, 0.115526831785053, 0.133, 0.186, 0.16, 0.118631253615615, 0.068, 0.0592985093657524,
     1      0.048, 0.055, 0.073, 0.143, 0.16, 0.158, 0.145, 0.131, 0.083, 0.07, 0.101, 0.095, 0.151, 0.124/
      Data a41 / -0.196, -0.196, -0.194, -0.175, -0.127130482456762, -0.09, 0.09, 0.006, -0.0668449664594602, -0.156,
     1      -0.207338794742061, -0.274, -0.248, -0.203, -0.154, -0.159, -0.141, -0.144, -0.126, -0.075, -0.021, 0.072, 0.205,
     1      0.329, 0.301/
      Data a42 / 0.044, 0.044, 0.061, 0.162, 0.324756359647008, 0.451, 0.506, 0.335, 0.146592339836334, -0.084, -0.124897005980964,
     1      -0.178, -0.187, -0.159, -0.023, -0.029, 0.061, 0.062, 0.037, -0.143, -0.028, -0.097, 0.015, 0.299, 0.243/
      Data a43 / -0.149495952993246, -0.149495952993246, -0.151128232484514, -0.168289086295502, -0.152744340369102,
     1      -0.125178594984686, -0.0708221042932599, -0.018687600885894, -0.0488962033737504, -0.102650669997252,
     1      -0.14139394076209, -0.163740294866553, -0.136395538821148, -0.124602153543284, -0.141053741759318, -0.196182748731043,
     1      -0.202510576145646, -0.240547327695437, -0.0826441436634076, -0.0180271258142243, 0.0892524330661483,
     1      0.116738540780062, 0.116530419956562, 0.245400179869857, 0.232382919073963/
      Data a44 / 0.256715289083819, 0.256715289083819, 0.255339396571963, 0.264260006001574, 0.272015226453774, 0.285510349704578,
     1      0.324678146856865, 0.350313882311414, 0.352438749966816, 0.334134637027212, 0.308471519152929, 0.27514124588578,
     1      0.2563436061904, 0.238864930136566, 0.205874034975355, 0.15795474716122, 0.0912683348414232, 0.0841261231937438,
     1      0.138117392538999, 0.207629332605861, 0.253411979944384, 0.23872346346654, 0.238588535068823, 0.202834869900874,
     1      0.134203153980519/
      Data a45 / 0.0457700473517813, 0.0457700473517813, 0.0435318067889647, 0.0501947432901603, 0.0624301316668515,
     1      0.0687884080659366, 0.0647670033588215, 0.0590494940840289, 0.0437403341501233, 0.014042923325033, 0.0156366357333638,
     1      0.0104774389934965, -0.0280510978438352, -0.0303761507159176, 0.0150254526329061, 0.0685318298837249,
     1      0.160653952013054, 0.210407637256458, 0.254117761826276, 0.25349767918346, 0.241497248250486, 0.19997793858101,
     1      0.186738729301699, 0.118521497630021, 0.100176124550952/
      Data a46 / -0.003997315926222, -0.003997315926222, -0.00357648428663343, -0.0109957133438085, -0.0286145009912559,
     1      -0.0514643243277616, -0.0804767575159452, -0.128361501561549, -0.126208108964704, -0.0724493444170797,
     1      -0.0492564870359541, -0.0281250300810575, 0.0719710790597949, 0.112299541489194, 0.189126676107113, 0.217751558860112,
     1      0.272661172941417, 0.282861088845214, 0.240034763108598, 0.269167681227446, 0.232475892491132, 0.223280865347115,
     1      0.219466643291953, 0.17212732187748, 0.143452062783061/
      Data s1est / 0.754, 0.754, 0.76, 0.781, 0.797331953044163, 0.81, 0.81, 0.81, 0.805953057418919, 0.801, 0.795779105619451,
     1      0.789, 0.77, 0.74, 0.699, 0.676, 0.631, 0.609, 0.578, 0.555, 0.548, 0.527, 0.505, 0.457, 0.429/
      Data s2est / 0.52, 0.52, 0.52, 0.52, 0.525631707946263, 0.53, 0.54, 0.55, 0.554496602867868, 0.56, 0.562175372658562, 0.565,
     1      0.57, 0.58, 0.59, 0.6, 0.615, 0.63, 0.64, 0.65, 0.64, 0.63, 0.63, 0.63, 0.63/
      Data s1msr / 0.741, 0.741, 0.747, 0.769, 0.785331953044163, 0.798, 0.798, 0.795, 0.785107473690691, 0.773, 0.764298509365752,
     1      0.753, 0.729, 0.693, 0.644, 0.616, 0.566, 0.541, 0.506, 0.48, 0.472, 0.447, 0.425, 0.378, 0.359/
      Data s2msr / 0.501, 0.501, 0.501, 0.501, 0.50719487874089, 0.512, 0.522, 0.527, 0.523402717705706, 0.519, 0.516824627341438,
     1      0.514, 0.513, 0.519, 0.524, 0.532, 0.548, 0.565, 0.576, 0.587, 0.576, 0.565, 0.568, 0.575, 0.585/
      Data s3 / 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47, 0.47,
     1      0.47, 0.47, 0.47, 0.47, 0.47, 0.47/
      Data s4 / 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36,
     1      0.36, 0.36, 0.36, 0.36, 0.36, 0.36/
      Data s5 / 0.54, 0.54, 0.54, 0.55, 0.555631707946263, 0.56, 0.57, 0.57, 0.574496602867868, 0.58, 0.584350745317124, 0.59,
     1      0.61, 0.63, 0.66, 0.69, 0.73, 0.77, 0.8, 0.8, 0.8, 0.76, 0.72, 0.67, 0.64/
      Data s6 / 0.63, 0.63, 0.63, 0.63, 0.641263415892527, 0.65, 0.69, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.69, 0.68,
     1      0.66, 0.62, 0.55, 0.52, 0.5, 0.5, 0.5/


C Find the requested spectral period and corresponding coefficients
      nPer = 25

C First check for the PGA, PGV, PGD cases
      if (specT .eq. 0.0) then
         period1 = period(1)
         a1T = a1(1)
         a2T = a2(1)
         a3T = a3(1)
         a4T = a4(1)
         a6T = a6(1)
         a8T = a8(1)
         M1T = M1(1)
         a10T = a10(1)
         a11T = a11(1)
         a12T = a12(1)
         a13T = a13(1)
         a14T = a14(1)
         a15T = a15(1)
         a17T = a17(1)
         a43T = a43(1)
         a44T = a44(1)
         a45T = a45(1)
         a46T = a46(1)
         a25T = a25(1)
         a28T = a28(1)
         a29T = a29(1)
         a31T = a31(1)
         a36T = a36(1)
         a37T = a37(1)
         a38T = a38(1)
         a39T = a39(1)
         a40T = a40(1)
         a41T = a41(1)
         a42T = a42(1)
         VlinT = Vlin(1)
         bT = b(1)
         c4T = c4(1)
         s1estT = s1est(1)
         s2estT = s2est(1)
         s1msrT = s1msr(1)
         s2msrT = s2msr(1)
         s3T = s3(1)
         s4T = s4(1)
         s5T = s5(1)
         s6T = s6(1)
         goto 1011
      endif
C   For other periods, loop over the spectral period range of the attenuation relationship.
      do i=2,nper-1
         if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
            count1 = i
            count2 = i+1
            goto 1020
         endif
      enddo
C Selected spectral period is outside range defined by attenuaton model.
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
      return
C Interpolate the coefficients for the requested spectral period.
 1020       call S24_interp (period(count1),period(count2),a1(count1),a1(count2),
     +                   specT,a1T,iflag)
            call S24_interp (period(count1),period(count2),a2(count1),a2(count2),
     +                   specT,a2T,iflag)
            call S24_interp (period(count1),period(count2),a3(count1),a3(count2),
     +                   specT,a3T,iflag)
            call S24_interp (period(count1),period(count2),a4(count1),a4(count2),
     +                   specT,a4T,iflag)
            call S24_interp (period(count1),period(count2),a6(count1),a6(count2),
     +                   specT,a6T,iflag)
            call S24_interp (period(count1),period(count2),a8(count1),a8(count2),
     +                   specT,a8T,iflag)
            call S24_interp (period(count1),period(count2),M1(count1),M1(count2),
     +                   specT,M1T,iflag)
            call S24_interp (period(count1),period(count2),a10(count1),a10(count2),
     +                   specT,a10T,iflag)
            call S24_interp (period(count1),period(count2),a11(count1),a11(count2),
     +                   specT,a11T,iflag)
            call S24_interp (period(count1),period(count2),a12(count1),a12(count2),
     +                   specT,a12T,iflag)
            call S24_interp (period(count1),period(count2),a13(count1),a13(count2),
     +                   specT,a13T,iflag)
            call S24_interp (period(count1),period(count2),a14(count1),a14(count2),
     +                   specT,a14T,iflag)
            call S24_interp (period(count1),period(count2),a15(count1),a15(count2),
     +                   specT,a15T,iflag)
            call S24_interp (period(count1),period(count2),a17(count1),a17(count2),
     +                   specT,a17T,iflag)
            call S24_interp (period(count1),period(count2),a43(count1),a43(count2),
     +                   specT,a43T,iflag)
            call S24_interp (period(count1),period(count2),a44(count1),a44(count2),
     +                   specT,a44T,iflag)
            call S24_interp (period(count1),period(count2),a45(count1),a45(count2),
     +                   specT,a45T,iflag)
            call S24_interp (period(count1),period(count2),a46(count1),a46(count2),
     +                   specT,a46T,iflag)
            call S24_interp (period(count1),period(count2),a25(count1),a25(count2),
     +                   specT,a25T,iflag)
            call S24_interp (period(count1),period(count2),a28(count1),a28(count2),
     +                   specT,a28T,iflag)
            call S24_interp (period(count1),period(count2),a29(count1),a29(count2),
     +                   specT,a29T,iflag)
            call S24_interp (period(count1),period(count2),a31(count1),a31(count2),
     +                   specT,a31T,iflag)
            call S24_interp (period(count1),period(count2),a36(count1),a36(count2),
     +                   specT,a36T,iflag)
            call S24_interp (period(count1),period(count2),a37(count1),a37(count2),
     +                   specT,a37T,iflag)
            call S24_interp (period(count1),period(count2),a38(count1),a38(count2),
     +                   specT,a38T,iflag)
            call S24_interp (period(count1),period(count2),a39(count1),a39(count2),
     +                   specT,a39T,iflag)
            call S24_interp (period(count1),period(count2),a40(count1),a40(count2),
     +                   specT,a40T,iflag)
            call S24_interp (period(count1),period(count2),a41(count1),a41(count2),
     +                   specT,a41T,iflag)
            call S24_interp (period(count1),period(count2),a42(count1),a42(count2),
     +                   specT,a42T,iflag)
            call S24_interp (period(count1),period(count2),Vlin(count1),Vlin(count2),
     +                   specT,VlinT,iflag)
            call S24_interp (period(count1),period(count2),b(count1),b(count2),
     +                   specT,bT,iflag)
            call S24_interp (period(count1),period(count2),c4(count1),c4(count2),
     +                   specT,c4T,iflag)
            call S24_interp (period(count1),period(count2),s1est(count1),s1est(count2),
     +                   specT,s1estT,iflag)
            call S24_interp (period(count1),period(count2),s2est(count1),s2est(count2),
     +                   specT,s2estT,iflag)
            call S24_interp (period(count1),period(count2),s1msr(count1),s1msr(count2),
     +                   specT,s1msrT,iflag)
            call S24_interp (period(count1),period(count2),s2msr(count1),s2msr(count2),
     +                   specT,s2msrT,iflag)
            call S24_interp (period(count1),period(count2),s3(count1),s3(count2),
     +                   specT,s3T,iflag)
            call S24_interp (period(count1),period(count2),s4(count1),s4(count2),
     +                   specT,s4T,iflag)
            call S24_interp (period(count1),period(count2),s5(count1),s5(count2),
     +                   specT,s5T,iflag)
            call S24_interp (period(count1),period(count2),s6(count1),s6(count2),
     +                   specT,s6T,iflag)
 1011 period1 = specT
C     Constant values
      n = 1.5
      M2 = 5.0
c      a4 = -0.1
      a5 = -0.41
      a7 = 0.0
C     Set C term
      if (period1 .eq. -1.0) then
         c = 2400.0
      else
         c = 2.4
      endif
C     Magnitude dependent taper for C4 (eq. 4.4)
      if (mag .ge. 5.0) then
         c4_mag = c4T
      elseif (mag .ge. 4.0) then
         c4_mag = c4T - (c4T-1.0) * (5.0-mag)
      else
         c4_mag = 1.0
      endif

c     Set distance (eq 4.3)
      R = sqrt(rRup**2 + c4_mag**2)

C     Base Model (eq 4.2)
      if ( mag .lt. M2 ) then
        f1 = a1T + a6T*(Mag-M2) + a7*(Mag-M2)**2 + a4T*(M2-M1T) + a8T*(8.5-M2)**2 +
     1                (a2T + a3T*(M2-M1T)) * alog(R) + a17T*Rrup
      elseif ( mag .le. M1T ) then
        f1 = a1T + a4T*(Mag-M1T) + a8T*(8.5-Mag)**2 + (a2T + a3T*(Mag-M1T)) * alog(R) + a17T*Rrup
      else
        f1 = a1T + a5*(Mag-M1T) + a8T*(8.5-Mag)**2 + (a2T + a3T*(Mag-M1T)) * alog(R) + a17T*Rrup
      endif

c     style of faulting (eq 4.5 and 4.6)
      if ( mag .gt. 5. ) then
        f7 = Frv * a11T
        f8 = Fn * a12T
      elseif ( mag .ge. 4. ) then
        f7 = Frv * a11T * (mag-4.)
        f8 = Fn * a12T * (mag-4.)
      else
        f7 = 0
        f8 = 0
      endif
c     ZTOR (eq 14)
c     form modified"Extend the upper bound ZTOR to 50km:"
      if (ZTOR .lt. 50.) then
        f6 = a15T * ZTOR/50.0
      else
        f6 = a15T
      endif
c     Set VS30_star (eq 4.8 and 4.9)
      if ( specT .gt. 3.0 ) then
        V1 = 800.
      elseif ( specT .gt. 0.5 ) then
        V1 = exp( -0.35 * alog(specT/0.5)  + alog(1500.) )
      else
        V1=1500.
      endif
      if ( vs30 .lt. v1 ) then
         vs30Star = vs30
      else
	     vs30Star = v1
      endif
c     Compute site amplification (Eq. 4.7)
      if (vs30 .lt. vLinT) then
        f5 = a10T*alog(vs30Star/vLinT) - bT*alog(c+Sa1180)
     1              + bT*alog(Sa1180+c*((vs30Star/vLinT)**(n)) )
      else
     	f5 = (a10T + bT*n) * alog(vs30Star/vLinT)
      endif
      if (vs30 .eq. 1180.) then
     	f5 = (a10T + bT*n) * alog(1180/vLinT)
      endif

c     Set Regional z1 reference (eq 4.18)
      if (regionflag .eq. 1) then
         z1_ref =  exp(-2.629 / 4.0 * alog((vs30**4.0 + 253.299**4.0)/(2491.945**4.0 + 253.299**4.0)))/ 1000.
      elseif (regionflag .eq. 3) then
         z1_ref = exp ( -5.23/2. * alog( (Vs30**2.0 + 412.**2.0)/(1360.**2.0+412.**2.0) ) ) / 1000.
      else
         z1_ref = exp ( -7.67/4. * alog( (Vs30**4.0 + 610.**4.0)/(1360.**4.0+610.**4.0) ) ) / 1000.
      endif

C     Soil Depth Model (eq 4.17)
C     Updated 8/1/13
      if ( vs30 .lt. 150.0 ) then
         y1z = a43T
         y2z = a43T
         x1z = 50.0
         x2z = 150.0
      elseif ( vs30 .lt. 250.0 ) then
         y1z = a43T
         y2z = a44T
         x1z = 150.0
         x2z = 250.0
      elseif ( vs30 .lt. 400.0 ) then
         y1z = a44T
         y2z = a45T
         x1z = 250.0
         x2z = 400.0
      elseif ( vs30 .lt. 700.0 ) then
         y1z = a45T
         y2z = a46T
         x1z = 400.0
         x2z = 700.0
      else
         y1z = a46T
         y2z = a46T
         x1z = 700.0
         x2z = 1000.0
      endif
C     Calculation f10 term and set it equal to zero for Vs=1180m/s (i.e., reference condition)
      if (vs30 .eq. 1180.0) then
          f10 = 0.0
      else
         f10 = ( y1z + (Vs30-x1z)*(y2z-y1z)/(x2z-x1z))*alog( (z1 + 0.01) / (z1_ref+0.01) )
      endif
c     Compute HW taper1 (eq 4.11)
      if ( dip .le. 30. ) then
        HW_taper1 = 60./ 45.
      else
        HW_taper1 = (90.-dip)/45.
      endif
c     Compute HW taper2 (eq. 4.12)
      hw_a2 = 0.2
      if( mag .ge. 6.5 ) then
        HW_taper2 = 1. + hw_a2 * (mag-6.5)
      elseif ( mag .gt. 5.5 ) then
        HW_taper2 = 1. + HW_a2 * (mag-6.5) - (1.0 - HW_a2)*(mag-6.5)**2
      else
        HW_taper2 = 0.
      endif
c     Compute HW taper 3 (eq. 4.13)
C	  April 11, correction by ronnie for HW_taper3 when Rx.gt.R2
      h1 = 0.25
      h2 = 1.5
      h3 = -0.75
      R1 = fltWidth * cos(dip*3.1415926/180.)
      R2 = 3.*R1
      if ( Rx .lt. R1 ) then
        HW_taper3 = h1 + h2*(Rx/R1) + h3*(Rx/R1)**2
      elseif ( Rx . le. R2 ) then
        HW_taper3 = 1. - (Rx-R1)/(R2-R1)
      else
        HW_taper3 = 0.
      endif
c     Compute HW taper 4 (eq 4.14)
      if ( ZTOR .le. 10. ) then
        HW_taper4 = 1. - (ZTOR**2) / 100.
      else
        HW_taper4 = 0.
      endif

c     Compute HW taper 5 (eq. 13)  **** Ry0 version ***
      Ry1 = Rx * tan(20.*3.1415926/180.)
      if ( Ry0 .lt. Ry1 ) then
        HW_taper5 = 1.
      elseif ( Ry0-Ry1 .lt. 5. ) then
        HW_taper5 = 1. - (Ry0-Ry1) / 5.
      else
        HW_taper5 = 0.
      endif
c     Compute HW taper 5 (eq. 4.15b)  **** No Ry0 version ***
c      if (Rjb .eq. 0. ) then
c        HW_taper5 = 1.
c      elseif ( Rjb .lt. 30. ) then
c        HW_taper5 = 1 - Rjb/30.
c      else
c        HW_taper5 = 0.
c      endif
c     Hanging wall Model (eq 4.10)
      if ( HWFlag .eq. 1 ) then
        f4 = a13T * HW_taper1 * HW_taper2 * HW_taper3 * HW_taper4 * HW_taper5
      else
        f4 = 0.
      endif
C     Add aftershock factor (eq 4.21)
      if (msasflag .eq. 1) then
         if (CRjb .ge. 15.0) then
             f11 = 0.0
         elseif (CRjb .le. 5.0) then
             f11 = a14T
         else
             f11 = a14T * ( 1.0 - (CRjb - 5.0) /10.0)
         endif
      elseif (msasflag .eq. 0) then
         f11 = 0.0
      endif
C     Now apply the regional attenuation differences (eq 4.22)
C     Global No Change
      if (regionflag .eq. 0) then
         freg = 0.0
C     Taiwan
      elseif (regionflag .eq. 1) then
         f12 = a31T * alog(vs30Star/VlinT)
         freg = f12 + a25T*Rrup
      elseif (regionflag .eq. 1 .and. vs30 .eq. 1180.0) then
         f12 = a31T * alog(1180/VlinT)
         freg = f12 + a25T*Rrup
C     China
      elseif (regionflag .eq. 2) then
         freg = a28T*Rrup
C     Japan
      elseif (regionflag .eq. 3) then
         freg = a42T + a29T*Rrup
      endif
C     Set the Sigma Values
      if (regionflag .ne. 3)  then
c     Compute within-event term, phiA, at the surface for linear site response (eq 7.1)
        if (mag .lt. 4.0) then
           phiA_est = s1estT
        elseif (mag .le. 6.0) then
           phiA_est = s1estT + ((s2estT-s1estT)/2.0)*(mag-4.0)
        else
           phiA_est = s2estT
        endif
c     Compute within-event term, phiA, for known Vs30
        if (mag .lt. 4.0) then
           phiA_msr = s1msrT
        elseif (mag .le. 6.0) then
           phiA_msr = s1msrT + ((s2msrT-s1msrT)/2.0)*(mag-4.0)
        else
           phiA_msr = s2msrT
        endif
C     choose phiA by Vs30 class
        if (vs30_class .eq. 0 ) then
	     phiA = phiA_est
        elseif (vs30_class .eq. 1) then
	     phiA = phiA_msr
        else
	     return
        endif
C     Set Sigma values for Japan Region
      else
C calculate phi_A for Japan (eq. 7.3)
        if (Rrup .lt. 30) then
           phiA = s5T
        elseif (Rrup .le. 80) then
           phiA = s5T + (s6T-s5T)/50*(Rrup-30)
        else
           phiA = s6T
        endif
      endif

c     Compute between-event term, tau (eq. 7.2)
      if (mag .lt. 5.0) then
         tauA = s3T
      elseif (mag .le. 7.0) then
         tauA = s3T + ((s4T-s3T)/2.0)*(mag-5.0)
      else
         tauA = s4T
      endif
      tauB = tauA
c     Compute phiB, within-event term with site amp variability removed (eq. 7.7)
c     with fix to model for small mag at long periods - limit sigAmp to be less than phiA
      sigAmp = 0.4
      if (phiA .le. sigAmp) then
        sigAmp = phiA*0.99
      endif
      phiB = sqrt( phiA**2 - sigAmp**2)

c     Compute partial derivative of alog(soil amp) w.r.t. alog(Sa1180) (eq. 7.10)
      if ( vs30 .ge. vLinT) then
        dAmp_dSa1180 = 0.
      else
        dAmp_dSa1180 = bT*Sa1180 * ( -1. / (Sa1180+c)
     1              + 1./ (Sa1180 + c*(vs30/vLinT)**(n)) )
      endif
C     Compute phi, with non-linear effects (eq. 7.8)
      phi = sqrt( phiB**2 * (1. + dAmp_dSa1180)**2 + sigAmp**2 )
C     Compute tau, with non-linear effects (eq. 7.9)
      tau = tauB * (1. + dAmp_dSa1180)

c     Compute median ground motion (eq. 1)
      lnSa = f1 + f4 + f5 + f6 + f7 + f8 + f10 + f11 + freg
      return
      end




c ---------------------------------------------------------------------------
C     *** Boore, Stewart, Seyhan and Atkinson NGA West 2 (NGA West2-2013) ***
C         Earthquake Spectra Report:
C            NGA-West2 Equations for Predicting PGA, PGV, and 5%-Damped
C                PSA for Shallow Crustal Earthquakes.
C             D. M. Boore, J. P. Stewart, E. Seyhan, and G. M. Atkinson
C     Notes:
C        Applicable Range:
C            3.0 < M < 8.5 (Strike-Slip)
C            3.0 < M < 7.0 (Normal)
C            Distance < 300km
C            150 < Vs < 1500 m/s
C            0.0 < Z1 < 3.0 km
C            Region Flag:
C               0 = Global
C               1 = China-Turkey
C               2 = Italy-Japan
c ---------------------------------------------------------------------------
      subroutine S04_BSSA14_TW_E02 ( mag, Rbjf, specT,
     1        period2, lnY, sigma, iflag, vs, ftype, pga4nl, z10, regionflag, basinflag,
     1        phi, tau )
C     Last Updated: 9/16/13
      parameter (MAXPER=24)
      REAL Period(MAXPER), c1(MAXPER), c2(MAXPER), c3(MAXPER)
      real h(MAXPER), DC3ChinaTrk(MAXPER), DC3ItalyJapan(MAXPER), e0(MAXPER)
      real e1(MAXPER), e2(MAXPER), e3(MAXPER), e4(MAXPER)
      real e5(MAXPER), e6(MAXPER), mh(MAXPER), c(MAXPER), Vc(MAXPER)
      real phi2(MAXPER), phi3(MAXPER), f4(MAXPER)
      real l1(MAXPER), l2(MAXPER), t1(MAXPER), t2(MAXPER)
      real f5(MAXPER), rjbbar(MAXPER), Dfr(MAXPER), Dfv(MAXPER)
      real R1(MAXPER), R2(MAXPER), DC3Global(MAXPER), f6(MAXPER), f7(MAXPER)
      real Mref, Rref, Vref, f1, f3, specT
      REAL MAG, RBJF, VS, z10
      real ftype, Rp, R
      INTEGER iFlag, count1, count2, regionflag, basinflag
      real lnY, mechS, mechN, mechR, pga4nl
      real f2, flin, fBasin, phi, tau
      real c1T, c2T, c3T, hT, e0T, e1T, e2T, e3T, e4T
      real e5T, e6T, mhT, cT, VcT, phi2T, phi3T, f4T, l1T, l2T, t1T, t2T
      real deltaz1, f5T, rjbbarT, DfrT, DfvT, R1T, R2T, DC3GlobalT
      real DC3ChinaTrkT, DC3ItalyJapanT, f6T, f7T


      Data Period / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4,
     1      5, 7.5/
      Data e0 / 0.4473, 0.4534, 0.48598, 0.56916, 0.673459231164795, 0.75436, 0.96447, 1.1268, 1.20895293439595, 1.3095,
     1      1.3164611925074, 1.3255, 1.2766, 1.2217, 1.1046, 0.96991, 0.66903, 0.3932, -0.14954, -0.58669, -1.1898, -1.6388,
     1      -1.966, -2.5865/
      Data e1 / -0.0595130663398657, -0.0434648257872447, 0.00723856448506604, 0.0927610149820673, 0.16457754638023,
     1      0.227041716245343, 0.44200643374538, 0.628456255453818, 0.726456018249075, 0.796155204184605, 0.832996288802006,
     1      0.839710890536238, 0.870329523227315, 0.86421353604234, 0.859428598430318, 0.799146696191413, 0.501318810676072,
     1      0.271210383253748, -0.216071094556293, -0.527765325832417, -1.23517562268132, -1.80451795360888, -2.14029683889059,
     1      -2.57205309494597/
      Data e2 / 0.0128644012118545, -0.039657974514646, -0.0432972654368019, -0.0528753047838778, -0.0371997189165065,
     1      -0.0694243260609077, -0.0665458750869888, -0.078126004267113, -0.0381648642482661, -0.015034889910705,
     1      0.0277769958059142, 0.0232791124271304, -0.0132120586353397, -0.0136120469735889, -0.0353660883149616,
     1      -0.089958791754687, -0.108469227753284, -0.0962910050989717, -0.109993355573954, -0.143706248763231,
     1      -0.134469002079297, -0.15369594108218, -0.355158141044777, -0.279997608428904/
      Data e3 / 0.203074215311353, 0.201176182119364, 0.20039108802914, 0.199653683877596, 0.210766879607819, 0.206791720434049,
     1      0.202176201184481, 0.209133744968306, 0.20864732810785, 0.189898726349265, 0.193454117511752, 0.200065319053198,
     1      0.190509627343089, 0.177634411439118, 0.151740289401428, 0.120064967833506, 0.135964753367863, 0.151592453559548,
     1      0.138426843070023, 0.120156010265541, 0.0481440566062522, -0.0190941855692312, -0.112287130179668, -0.215408568323982/
      Data e4 / 0.712266102827589, 0.684842932365268, 0.683879021139178, 0.672977363930926, 0.620065668793878, 0.614099394851088,
     1      0.603475935406328, 0.639500382498947, 0.674037854179504, 0.674489114985437, 0.62843666806635, 0.627594892015755,
     1      0.600149445878001, 0.642710126756053, 0.65270724948819, 0.689679935416504, 1.08672406855482, 1.39585543347496,
     1      1.72422222138858, 1.9015545343119, 2.12964285080081, 2.21837879531008, 2.2105384076795, 1.85456007759323/
      Data e5 / 0.05053, 0.04932, 0.05339, 0.06144, 0.0647739711041879, 0.06736, 0.07355, 0.05523, 0.0114780540956452, -0.04207,
     1      -0.072042284489666, -0.11096, -0.16213, -0.1959, -0.22608, -0.23522, -0.21591, -0.18983, -0.1467, -0.11237, -0.04332,
     1      -0.01464, -0.01486, -0.08161/
      Data e6 / -0.1662, -0.1659, -0.16561, -0.1669, -0.174739337461198, -0.18082, -0.19665, -0.19838, -0.19116744899994, -0.18234,
     1      -0.171976524654611, -0.15852, -0.12784, -0.09286, -0.02319, 0.02912, 0.10829, 0.17895, 0.33896, 0.44788, 0.62694,
     1      0.76303, 0.87314, 1.0121/
      Data Mh / 5.62683852817361, 5.7278287417983, 5.72634382479267, 5.72419805461193, 5.78950009876979, 5.6454778542563,
     1      5.60564354629504, 5.6095882429428, 5.62540554303087, 5.71790190281766, 5.84351085002455, 5.87951468808749,
     1      6.01455506496882, 6.0580925842216, 6.22967481182813, 6.31771461927764, 6.22329198777463, 6.19803864164175,
     1      6.1770931403571, 6.19479909698098, 6.20544074705526, 6.18063946709863, 6.21078404445105, 6.59049042088875/
      Data c1 / -1.134, -1.134, -1.1394, -1.1421, -1.12734492518079, -1.1159, -1.0831, -1.0652, -1.05980407655856, -1.0532,
     1      -1.05646305898784, -1.0607, -1.0773, -1.0948, -1.1243, -1.1459, -1.1777, -1.193, -1.2063, -1.2159, -1.2179, -1.2162,
     1      -1.2189, -1.2543/
      Data c2 / 0.1917, 0.1916, 0.18962, 0.18842, 0.187670982843147, 0.18709, 0.18225, 0.17203, 0.163927121632102, 0.15401,
     1      0.150042120270783, 0.14489, 0.13925, 0.13388, 0.12512, 0.12015, 0.11054, 0.10248, 0.09645, 0.09636, 0.09764, 0.10218,
     1      0.10353, 0.12507/
      Data c3 / -0.00789237345533951, -0.00783583541961706, -0.00776556896476328, -0.00829539839832367, -0.00920134243728047,
     1      -0.00996907638994333, -0.0115155455012644, -0.0118950222605932, -0.0115088807317956, -0.0105015393785244,
     1      -0.00973285233813413, -0.00868358737872155, -0.00699522992186121, -0.00579250321997269, -0.00356117007757743,
     1      -0.00182136049301181, -0.00032734268017595, 1.97247798069236e-05, 0.000714578116996264, 0.000165203729102031,
     1      0.00127217001357917, 0.00138046929786292, 0.00144089026812282, 0.0011090363057596/
      Data h / 4.5, 4.5, 4.5, 4.49, 4.32668046955837, 4.2, 4.04, 4.13, 4.24691167456457, 4.39, 4.48571639697672, 4.61, 4.78, 4.93,
     1      5.16, 5.34, 5.6, 5.74, 6.18, 6.54, 6.93, 7.32, 7.78, 9.48/
      Data Dc3Global / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/
      Data Dc3ChinaTrk / 0.002858, 0.002816, 0.00278, 0.002765, 0.00287312879256825, 0.002957, 0.002957, 0.002879,
     1      0.00283718159332883, 0.002786, 0.00271029703148205, 0.002612, 0.002444, 0.002196, 0.002107, 0.002348, 0.00269,
     1      0.002921, 0.003039, 0.002923, 0.002616, 0.002605, 0.002604, 0.0026/
      Data Dc3ItalyJapan / -0.00255, -0.002437, -0.00234, -0.002168, -0.00206831876935114, -0.001991, -0.002159, -0.002439,
     1      -0.00255905929657207, -0.002706, -0.00282085967637207, -0.00297, -0.00314, -0.003297, -0.003212, -0.002907, -0.002527,
     1      -0.002089, -0.001518, -0.00117, -0.001188, -0.001083, -0.000571, 0.000385/
      Data c / -0.491005720442681, -0.496858012636404, -0.492693576830718, -0.487762396793923, -0.474108229985153,
     1      -0.454433171424995, -0.422912974621248, -0.432287456269094, -0.447361030268909, -0.477038393985033, -0.495648486633132,
     1      -0.505872247475676, -0.523355295292678, -0.580611412765796, -0.622063967379841, -0.643464365148664, -0.799483990066468,
     1      -0.902512999802672, -0.969173634547672, -0.959488485054134, -0.976840024588964, -0.994362745349477, -0.97477634851446,
     1      -0.890924799294348/
      Data Vc / 1500, 1500.2, 1500.36, 1502.95, 1502.08834868422, 1501.42, 1494, 1479.12, 1462.81082139824, 1442.85,
     1      1420.99185552677, 1392.61, 1356.21, 1308.47, 1252.66, 1203.91, 1147.59, 1109.95, 1072.39, 1009.49, 922.43, 844.48,
     1      793.13, 771.01/
      Data f4 / -0.15, -0.14833, -0.1471, -0.15485, -0.1782103245611, -0.19633, -0.22866, -0.24916, -0.252743792485691, -0.25713,
     1      -0.252539963690434, -0.24658, -0.23574, -0.21912, -0.19582, -0.17041, -0.13866, -0.10521, -0.06794, -0.03614, -0.01358,
     1      -0.00321, -0.00025, -5e-05/
      Data f5 / -0.00701, -0.00701, -0.00728, -0.00735, -0.00685440970072883, -0.00647, -0.00573, -0.0056, -0.0057124150716967,
     1      -0.00585, -0.00597617161419659, -0.00614, -0.00644, -0.0067, -0.00713, -0.00744, -0.00812, -0.00844, -0.00771,
     1      -0.00479, -0.00183, -0.00152, -0.00144, -0.00137/
      Data f6 / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.092, 0.367, 0.638, 0.871, 1.135, 1.271, 1.329, 1.329/
      Data f7 / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.059, 0.208, 0.309, 0.382, 0.516, 0.629, 0.738, 0.809/
      Data R1 / 110, 111.667, 113.105, 112.133, 104.132595691538, 97.927, 85.989, 79.587, 80.3689592387222, 81.326,
     1      85.4944490883363, 90.907, 97.039, 103.152, 106.018, 105.536, 108.388, 116.388, 125.38, 130.369, 130.365, 129.489,
     1      130.224, 130.716/
      Data R2 / 270, 270, 270, 269.998, 269.999126341589, 270, 270.035, 270.092, 270.123925880362, 270.163, 270.092082851331, 270,
     1      269.449, 268.593, 266.543, 265, 266.511, 270, 262.413, 240.138, 195, 199.446, 230, 250.395/
      Data Dfr / 0.1, 0.096, 0.092, 0.081, 0.0708629256967262, 0.063, 0.064, 0.087, 0.101838789463964, 0.12, 0.126961192507398,
     1      0.136, 0.141, 0.138, 0.122, 0.109, 0.1, 0.098, 0.104, 0.105, 0.088, 0.07, 0.061, 0.058/
      Data Dfv / 0.07, 0.07, 0.03, 0.029, 0.0295631707946263, 0.03, 0.022, 0.014, 0.0144496602867868, 0.015, 0.0280522359513715,
     1      0.045, 0.055, 0.05, 0.049, 0.06, 0.07, 0.02, 0.01, 0.008, 0, 0, 0, 0/
      Data l1 / 0.6951, 0.698, 0.7018, 0.7212, 0.73916514834858, 0.7531, 0.7447, 0.7279, 0.72448258182042, 0.7203,
     1      0.716384329214589, 0.7113, 0.6984, 0.6754, 0.6428, 0.6147, 0.5815, 0.5527, 0.5317, 0.5263, 0.5335, 0.536, 0.5285,
     1      0.5117/
      Data l2 / 0.4951, 0.4992, 0.5023, 0.5136, 0.524131293859512, 0.5323, 0.5423, 0.5407, 0.538946324881531, 0.5368,
     1      0.537670149063425, 0.5388, 0.5471, 0.5614, 0.5804, 0.599, 0.6218, 0.625, 0.6192, 0.6182, 0.619, 0.6156, 0.6223, 0.6344/
      Data t1 / 0.3982, 0.4019, 0.4087, 0.4449, 0.477451271929402, 0.5027, 0.4744, 0.4153, 0.387780790448648, 0.3541,
     1      0.34953171741702, 0.3436, 0.35, 0.3634, 0.381, 0.4101, 0.4572, 0.4983, 0.5248, 0.5325, 0.5369, 0.5427, 0.532, 0.511/
      Data t2 / 0.348, 0.3446, 0.3464, 0.364, 0.39908554050522, 0.4263, 0.4658, 0.4583, 0.42664391581021, 0.3879,
     1      0.353355082182037, 0.3085, 0.2664, 0.229, 0.2097, 0.2235, 0.2664, 0.2984, 0.3151, 0.3291, 0.3438, 0.3492, 0.3354,
     1      0.2699/

C     Set constant parameters
      mref = 4.5
      rref = 1.0
      vref = 760.0
      f1 = 0.0
      f3 = 0.1
      V1 = 225.0
      V2 = 300.0
C First check for the PGA case (i.e., specT=0.0)
      nPer = 24
      if (specT .eq. 0.0) then
         period1 = period(1)
         e0T = e0(1)
         e1T = e1(1)
         e2T = e2(1)
         e3T = e3(1)
         e4T = e4(1)
         e5T = e5(1)
         e6T = e6(1)
         mhT = mh(1)
         c1T = c1(1)
         c2T = c2(1)
         c3T = c3(1)
         hT = h(1)
         cT = c(1)
         VcT = vc(1)
         phi2T = phi2(1)
         phi3T = phi3(1)
         Dc3GlobalT = DC3global(1)
         Dc3ChinaTrkT = DC3ChinaTrk(1)
         Dc3ItalyJapanT = DC3ItalyJapan(1)
         f4T = f4(1)
         f5T = f5(1)
         f6T = f6(1)
         f7T = f7(1)
         R1T = R1(1)
         R2T = R2(1)
         l1T = l1(1)
         l2T = l2(1)
         t1T = t1(1)
         t2T = t2(1)
         rjbbarT = rjbbar(1)
         DfrT = Dfr(1)
         DfvT = Dfv(1)
         goto 1011
      elseif (specT .gt. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=2,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020
            endif
         enddo
      endif
C Selected spectral period is outside range defined by attenuaton model.
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
      return
C Interpolate the coefficients for the requested spectral period.
 1020       call S24_interp (period(count1),period(count2),e0(count1),e0(count2),
     +                   specT,e0T,iflag)
            call S24_interp (period(count1),period(count2),e1(count1),e1(count2),
     +                   specT,e1T,iflag)
            call S24_interp (period(count1),period(count2),e2(count1),e2(count2),
     +                   specT,e2T,iflag)
            call S24_interp (period(count1),period(count2),e3(count1),e3(count2),
     +                   specT,e3T,iflag)
            call S24_interp (period(count1),period(count2),e4(count1),e4(count2),
     +                   specT,e4T,iflag)
            call S24_interp (period(count1),period(count2),e5(count1),e5(count2),
     +                   specT,e5T,iflag)
            call S24_interp (period(count1),period(count2),e6(count1),e6(count2),
     +                   specT,e6T,iflag)
            call S24_interp (period(count1),period(count2),mh(count1),mh(count2),
     +                   specT,mhT,iflag)
            call S24_interp (period(count1),period(count2),c1(count1),c1(count2),
     +                   specT,c1T,iflag)
            call S24_interp (period(count1),period(count2),c2(count1),c2(count2),
     +                   specT,c2T,iflag)
            call S24_interp (period(count1),period(count2),c3(count1),c3(count2),
     +                   specT,c3T,iflag)
            call S24_interp (period(count1),period(count2),h(count1),h(count2),
     +                   specT,hT,iflag)
            call S24_interp (period(count1),period(count2),c(count1),c(count2),
     +                   specT,cT,iflag)
            call S24_interp (period(count1),period(count2),phi2(count1),phi2(count2),
     +                   specT,phi2T,iflag)
            call S24_interp (period(count1),period(count2),phi3(count1),phi3(count2),
     +                   specT,phi3T,iflag)
            call S24_interp (period(count1),period(count2),DC3Global(count1),DC3Global(count2),
     +                   specT,DC3GlobalT,iflag)
            call S24_interp (period(count1),period(count2),DC3ChinaTrk(count1),DC3ChinaTrk(count2),
     +                   specT,DC3ChinaTrkT,iflag)
            call S24_interp (period(count1),period(count2),DC3ItalyJapan(count1),DC3ItalyJapan(count2),
     +                   specT,DC3ItalyJapanT,iflag)
            call S24_interp (period(count1),period(count2),Vc(count1),Vc(count2),
     +                   specT,VcT,iflag)
            call S24_interp (period(count1),period(count2),f4(count1),f4(count2),
     +                   specT,f4T,iflag)
            call S24_interp (period(count1),period(count2),f5(count1),f5(count2),
     +                   specT,f5T,iflag)
            call S24_interp (period(count1),period(count2),f6(count1),f6(count2),
     +                   specT,f6T,iflag)
            call S24_interp (period(count1),period(count2),f7(count1),f7(count2),
     +                   specT,f7T,iflag)
            call S24_interp (period(count1),period(count2),R1(count1),R1(count2),
     +                   specT,R1T,iflag)
            call S24_interp (period(count1),period(count2),R2(count1),R2(count2),
     +                   specT,R2T,iflag)
            call S24_interp (period(count1),period(count2),l1(count1),l1(count2),
     +                   specT,l1T,iflag)
            call S24_interp (period(count1),period(count2),l2(count1),l2(count2),
     +                   specT,l2T,iflag)
            call S24_interp (period(count1),period(count2),t1(count1),t1(count2),
     +                   specT,t1T,iflag)
            call S24_interp (period(count1),period(count2),t2(count1),t2(count2),
     +                   specT,t2T,iflag)
            call S24_interp (period(count1),period(count2),rjbbar(count1),rjbbar(count2),
     +                   specT,rjbbarT,iflag)
            call S24_interp (period(count1),period(count2),Dfr(count1),Dfr(count2),
     +                   specT,DfrT,iflag)
            call S24_interp (period(count1),period(count2),Dfv(count1),Dfv(count2),
     +                   specT,DfvT,iflag)
 1011 period1 = specT
C.....Set the mechanism terms based on ftype............
C     Set mechanism term and corresponding Frv and Fnm values.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C      -1       Normal                    -120 < Rake <  -60
C     -0.5      Normal/Oblique            -150 < Rake < -120
C                                          -60 < Rake <  -30
C       0       Strike-Slip               -180 < Rake < -150
C                                          -30 < Rake <   30
C                                          150 < Rake <  180
C      0.5      Reverse/Oblique             30 < Rake <   60
C                                          120 < Rake <  150
C       1       Reverse                     60 < Rake <  120
C     Note: Unknown Mechanism is not currently coded.
      if (ftype .eq. -1.0) then
         mechS = 0.0
         mechN = 1.0
         mechR = 0.0
      elseif (ftype .eq. -0.5) then
         mechS = 0.0
         mechN = 1.0
         mechR = 0.0
      elseif (ftype .eq. 0.0) then
         mechS = 1.0
         mechN = 0.0
         mechR = 0.0
      elseif (ftype .eq. 0.5) then
         mechS = 0.0
         mechN = 0.0
         mechR = 1.0
      elseif (ftype .eq. 1.0) then
         mechS = 0.0
         mechN = 0.0
         mechR = 1.0
      endif
C.....First compute the Reference Rock PGA value...........
C.....This will include the regional dependence for PGA....
C.....MAGNITUDE DEPENDENCE.................................
      if (mag .le. mh(1)) then
         term1 = e1(1) + e2(1)*mechN + e3(1)*mechR +
     1           e4(1)*(mag-mh(1)) + e5(1)*(mag-mh(1))**2.0
      else
         term1 = e1(1) + e2(1)*mechN + e3(1)*mechR +
     1           e6(1)*(mag-mh(1))
      endif
C.....Distance dependence......
      Rp = SQRT( Rbjf*Rbjf+h(1)*h(1) )
C.....Apply Regional term.....
         TERM2 = ( c1(1) + c2(1)*(mag-mref) ) * alog(Rp/rref) +
     1           c3(1)  * (Rp-rref)

      pga4nl = exp(term1+term2)
C.....Now compute the requested ground motion value........
C.....MAGNITUDE DEPENDENCE.................................
      if (mag .le. mhT) then
         term1 = e1T + e2T*mechN + e3T*mechR +
     1           e4T*(mag-mhT) + e5T*(mag-mhT)**2.0
      else
         term1 = e1T + e2T*mechN + e3T*mechR +
     1           e6T*(mag-mhT)
      endif
C.....Distance dependence......
      R = SQRT( Rbjf*Rbjf+hT*hT )
C     Now apply the regional attenuation differnece.
C     Global Case
         TERM2 = ( c1T + c2T*(mag-mref) ) * alog(R/rref) +
     1        c3T * (R-rref)
C.....Site Response Term.........
C.....Now compute the site term........
C.....First the linear term......
      if (vs .le. VcT ) then
         flin = cT*alog(Vs/Vref)
      else
         flin = cT*alog(VcT/Vref)
      endif
C.....Next the non-linear term......
      f2 = f4T*(exp(f5T*(min(vs,760.0)-360.0))-exp(f5T*(760.0-360.0)))

C.....Now compute the basin effect term......
C Deviation from ln(Vs30) scaling: bedrock depth (Z1) effect for California.
c      if (basinflag .eq. 1) then
c     Compute the DeltaZ1 term. Apply the California model for all regions except for Japan.
          deltaz1 = z10 -
     1           exp(-2.63/4.0 * alog((vs**4.0 + 253.0**4.0)/(2492.0**4.0 + 253.0**4.0)))/1000.0
          fbasin = min(f7T, f6T * deltaZ1)

c      else
c         fbasin = 0.0
c      endif
      TERM3 = flin + f1 + f2*alog((pga4nl+f3)/f3) + fBasin

      lnY = term1 + term2 + term3
      period2 = period1
c     Now compute the sigma value which is a function of magnitude and Vs
C     Tau (Eq. 4.11)
      if (mag .le. 4.5) then
         tau = t1T
      elseif (mag .gt. 4.5 .and. mag .lt. 5.5) then
         tau = t1T + (t2T - t1T)*(mag - 4.5)
      else
         tau = t2T
      endif

C     Phi - Magnitude (Eq. 4.12)
      if (mag .le. 4.5) then
         phi = l1T
      elseif (mag .gt. 4.5 .and. mag .lt. 5.5) then
         phi = l1T + (l2T - l1T)*(mag - 4.5)
      else
         phi = l2T
      endif
C     Phi - Distance (Eq. 4.13)
      if (rbjf .le. R1T) then
          phi = phi
      elseif (rbjf .gt. R1T .and. rbjf .le. R2T) then
          phi = phi + DfrT*( (alog(rbjf/R1T))/(alog(R2T/R1T)) )
      else
          phi = phi + DfrT
      endif
C     Phi - Vs30 (Eq. 4.14)
      if (vs .ge. V2) then
         phi = phi
      elseif (vs .ge. V1 .and. vs .lt. V2) then
         phi = phi - DfvT*( alog(V2/vs) / alog(V2/V1) )
      else
         phi = phi - DfvT
      endif
      sigma = sqrt (tau**2 + phi**2)
C     Convert ground motion to units of gals.
      lnY = lnY + 6.89
      return
      END
c ---------------------------------------------------------------------
C ** Chiou and Youngs (NGA West2-2013 Model) Horizontal **
C     Earthquake Spectra Paper:
C        Update of the Chiou and Youngs NGA Model for the
C            Average Horizontal Component of Peak
C            Ground Motion and Response Spectra
C         B. S.J. Chiou and R.R. Youngs
C     Notes:
C        Applicable Range (see Abstract):
C           3.5 <= M <= 8.5 Strike-slip
C           3.5 <= M <= 8.0 Reverse and Normal
C           Rrup <= 300 km
C           Ztor <= 20 km
C           180m/s <= Vs30m <= 1500m/s
C           Mainshock events only
C        Regional attenuation included based on Regionflag
C             0 = Global
C             1 = Japan/Italy
C             2 = Wenchuan (note only applicable for M7.9 event)
C         Sigma dependent on estimated or measured Vs30m based on
C             Vs30_Class
C             0 = Estimated Vs30m
C             1 = Measured Vs30m
c ---------------------------------------------------------------------
      Subroutine S04_CY14_TW_E04 ( m, Rrup, Rbjf, specT,
     1                     period2, lnY, sigma, iflag,
     2                     vs, Delta, DTor, Ftype, depthvs10, vs30_class,
     3                     hwflag, Rx, regionflag, phi, tau )
C     Last Updated: 8/1/13
      parameter (MAXPER=25)
      REAL Period(MAXPER), C1(MAXPER), C1a(MAXPER), C1b(MAXPER)
      REAL cn(MAXPER), cm(MAXPER), c5(MAXPER), c6(MAXPER), c8(MAXPER)
      REAL c7(MAXPER), c9(MAXPER), gamma1(MAXPER), gamma2(MAXPER)
      REAL phi1(MAXPER), phi2(MAXPER), phi3(MAXPER), phi4(MAXPER)
      REAL phi5(MAXPER), phi6(MAXPER), phi1jp(MAXPER), phi5jp(MAXPER), phi6jp(MAXPER)
      REAL tau1(MAXPER), tau2(MAXPER), sigma1(MAXPER), sigma2(MAXPER)
      REAL sigma3(MAXPER), c9a(MAXPER)
      REAL c3(MAXPER), gm(MAXPER), c9b(MAXPER)
      Real CHM(MAXPER), C1c(MAXPER), C1d(MAXPER), C7b(MAXPER), C8b(MAXPER)
      real C11(MAXPER), C11B(MAXPER)
      real gscaleJapIt(MAXPER), gscaleWen(MAXPER), sigma2Jap(MAXPER)

      REAL c1T, c1aT, c1bT, cnT, cmT, c5T, c6T, c7T, c9T, c9aT, c3T, c8T
      REAL gamma1T, gamma2T, phi1T, phi2T, phi3T, phi4T, sigma3T
      REAL phi5T, phi6T, tau1T, tau2T, sigma1T, sigma2T
      real C1cT, C1dT, C7bT, C11T, C11bT, CHMT
      REAL c2, c4, c4a, cRB, pi, d2r, gamma, gmT, c9bT
      real cc, cosdelta, r1, r2, r3, r4, hw, psa_ref, psa, a, b, c
      integer iflag, count1, count2, hwflag, vs30_class, regionflag
      REAL M, RRUP, RBJF, DTOR, Delta, specT, sigma, Ftype, Rx
      REAL period2, lnY, F_RV, F_NM, depthvs10, tau, rkdepth
      real c8a, c8bT, deltaZ1, fd
      real NL0, sigma_NL0, F_Measured, F_Inferred, mz_TOR, deltaZ_TOR, coshM
      real gscaleJapItT, gscaleWenT, sigma2JapT, phi
      real phi1jpT, phi5jpT, phi6jpT


      Data period / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4,
     1      5, 7.5, 10/
      Data c1 / -1.29685236824339, -1.29685236824339, -1.25271582686019, -1.11773250980953, -0.956465870903099, -0.799324896281897,
     1      -0.473133817081457, -0.353655570079099, -0.321042638540326, -0.430478115531005, -0.488513320442751, -0.588000246169921,
     1      -0.754765039959403, -0.948897280768392, -1.27976500725669, -1.5161340602198, -2.06982415253695, -2.43130880701782,
     1      -2.91990260094065, -3.14328949115078, -3.59175920286139, -3.73548289693155, -3.8619921765288, -4.27387883486744,
     1      -4.8739084917412/
      Data c1a / 0.132636216298042, 0.132636216298042, 0.121913678741804, 0.0954458190369074, 0.0780343270248127,
     1      0.0797499701125017, 0.126409272490449, 0.237857890187294, 0.298285920791561, 0.358866830018622, 0.36378185586797,
     1      0.356638682110162, 0.412416702936915, 0.491578096184498, 0.470551468547512, 0.397454699266285, 0.407088725126396,
     1      0.370003161641225, 0.296244421779607, 0.249035757405967, 0.131863234230354, -0.0602151515860512, -0.170108793250811,
     1      -0.317888319174529, -0.213657545750405/
      Data c1b / -0.255, -0.255, -0.255, -0.255, -0.255, -0.255, -0.254, -0.253, -0.252, -0.25, -0.248, -0.2449, -0.2382, -0.2313,
     1      -0.2146, -0.1972, -0.162, -0.14, -0.1184, -0.11, -0.104, -0.102, -0.101, -0.101, -0.1/
      Data c1c / 0.374104895476179, 0.374104895476179, 0.394779299081704, 0.450367178792894, 0.502125276282922, 0.508541914329817,
     1      0.428533580148518, 0.244753765147496, 0.117861600910215, -0.0501929400220308, -0.0759243806200689, -0.0673618474199209,
     1      -0.193405747617701, -0.336816868253795, -0.340127470321498, -0.254193921547823, -0.234709477226598, -0.165352574104918,
     1      -0.114381565715004, -0.0730641756720992, 0.0136196696946929, 0.297168386190877, 0.457028397025905, 0.601615377508697,
     1      0.389474218593599/
      Data c1d / 0.579885366931696, 0.579885366931696, 0.571532295941719, 0.542986936430351, 0.539763891586565, 0.52141078447487,
     1      0.522557997517347, 0.491383246687325, 0.497598699249502, 0.538049677027715, 0.569106172547023, 0.582648948364874,
     1      0.543121898449559, 0.526919263871434, 0.566056464373584, 0.508787011694501, 0.453602572723648, 0.386616890673916,
     1      0.318326198639264, 0.302169672767348, 0.311997432161276, 0.377860259670876, 0.0664297305804952, 0.285446228730392,
     1      -0.0136805779652169/
      Data cn / 16.0875, 16.0875, 15.7118, 15.8819, 16.4556, 17.6453, 20.1772, 19.9992, 18.7106, 16.6246, 15.3709, 13.7012,
     1      11.2667, 9.1908, 6.5459, 5.2305, 3.7896, 3.3024, 2.8498, 2.5417, 2.1488, 1.8957, 1.7228, 1.5737, 1.5265/
      Data cM / 4.9993, 4.9993, 4.9993, 4.9993, 4.9993, 4.9993, 5.0031, 5.0172, 5.0315, 5.0547, 5.0704, 5.0939, 5.1315, 5.167,
     1      5.2317, 5.2893, 5.4109, 5.5106, 5.6705, 5.7981, 5.9983, 6.1552, 6.2856, 6.5428, 6.7415/
      Data c3 / 1.23775675850738, 1.23775675850738, 1.2100424798881, 1.17153664416715, 1.1376437803661, 1.08246488917746,
     1      1.10369070050752, 1.13570908666677, 1.24297786137047, 1.30184311690581, 1.36171523129664, 1.44527356984657,
     1      1.594640592675, 1.72776997676668, 1.89169957915458, 1.97790604653059, 2.23537178645213, 2.49270651199425,
     1      2.75122931083948, 2.8970091263776, 3.00181841245375, 3.13027839998167, 3.1358113461517, 3.03809613747909,
     1      2.73950225730737/
      Data c5 / 6.4551, 6.4551, 6.4551, 6.4551, 6.4551, 6.4551, 6.4551, 6.8305, 7.1333, 7.3621, 7.4365, 7.4972, 7.5416, 7.56,
     1      7.5735, 7.5778, 7.5808, 7.5814, 7.5817, 7.5818, 7.5818, 7.5818, 7.5818, 7.5818, 7.5818/
      Data cHM / 3.0956, 3.0956, 3.0963, 3.0974, 3.0988, 3.1011, 3.1094, 3.2381, 3.3407, 3.43, 3.4688, 3.5146, 3.5746, 3.6232,
     1      3.6945, 3.7401, 3.7941, 3.8144, 3.8284, 3.833, 3.8361, 3.8369, 3.8376, 3.838, 3.838/
      Data c6 / 0.4908, 0.4908, 0.4925, 0.4992, 0.5037, 0.5048, 0.5048, 0.5048, 0.5048, 0.5045, 0.5036, 0.5016, 0.4971, 0.4919,
     1      0.4807, 0.4707, 0.4575, 0.4522, 0.4501, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45/
      Data c7 / 0.0156320196168315, 0.0156320196168315, 0.0155659066225557, 0.0146375738629334, 0.0141084359110348,
     1      0.0144675463384911, 0.0152557523823881, 0.017607076212419, 0.018295042859516, 0.0212021767029952, 0.0216044681666273,
     1      0.0216325540991847, 0.0206030525582857, 0.0192274906261871, 0.0203438004744285, 0.0221610151832725, 0.0181240815582568,
     1      0.0150093892866716, 0.0152967789184208, 0.0158948163799267, 0.010176392608306, 0.00462828820896198,
     1      0.00101109863417872, -0.00259603156324936, -0.00775735563319467/
      Data c7b / 0.0373479124617126, 0.0373479124617126, 0.0376647327000708, 0.0410806029766391, 0.0427431654503428,
     1      0.042628675341005, 0.0397954134478023, 0.0344321279195352, 0.0317755358269565, 0.0234082190447402, 0.0220299636347817,
     1      0.0202156172523618, 0.0193661188593883, 0.0198764817033073, 0.0175409091342005, 0.0153015300326434, 0.0202430270775378,
     1      0.023988718198258, 0.0173169162080137, 0.0127766342571745, 0.0135894379296717, 0.0201630919552565, 0.0311749656859344,
     1      0.041123655355196, 0.0482773665664252/
      Data c8b / 0.4833, 0.4833, 1.2144, 1.6421, 1.9456, 2.181, 2.6087, 2.9122, 3.1045, 3.3399, 3.4719, 3.6434, 3.8787, 4.0711,
     1      4.3745, 4.6099, 5.0376, 5.3411, 5.7688, 6.0723, 6.5, 6.8035, 7.0389, 7.4666, 7.77/
      Data c9 / 0.9228, 0.9228, 0.9296, 0.9396, 0.9661, 0.9794, 1.026, 1.0177, 1.0008, 0.9801, 0.9652, 0.9459, 0.9196, 0.8829,
     1      0.8302, 0.7884, 0.6754, 0.6196, 0.5101, 0.3917, 0.1244, 0.0086, 0, 0, 0/
      Data c9a / 0.1202, 0.1202, 0.1217, 0.1194, 0.1166, 0.1176, 0.1171, 0.1146, 0.1128, 0.1106, 0.115, 0.1208, 0.1208, 0.1175,
     1      0.106, 0.1061, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1/
      Data c9b / 6.8607, 6.8607, 6.8697, 6.9113, 7.0271, 7.0959, 7.3298, 7.2588, 7.2372, 7.2109, 7.2491, 7.2988, 7.3691, 6.8789,
     1      6.5334, 6.526, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5/
      Data c11 / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/
      Data c11b / -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.444,
     1      -0.3539, -0.2688, -0.1793, -0.1428, -0.1138, -0.1062, -0.102, -0.1009, -0.1003, -0.1001, -0.1001, -0.1, -0.1/
      Data gamma1 / -0.00640307889116, -0.00640307889116, -0.00638131012042546, -0.00625997127234089, -0.00642538130455206,
     1      -0.00690019669933074, -0.00848542829220626, -0.00990011050213089, -0.0103515868006968, -0.0120997918097204,
     1      -0.0122285761449459, -0.0119797715281222, -0.010902997808741, -0.00964286794696091, -0.00672196790194451,
     1      -0.00368546023588717, -0.00352284967615295, -0.00448724464278282, -0.00541975711124784, -0.00682327611588849,
     1      -0.00573735719392469, -0.00497998238605772, -0.0040599277758327, -0.00299825668266239, -0.0012793982951989/
      Data gamma2 / -0.0201255906298917, -0.0201255906298917, -0.0207779647283925, -0.023413720264442, -0.0245651180616863,
     1      -0.0240875383609615, -0.0201742310538795, -0.0148236450210469, -0.0119579201248049, -0.00572565425101764,
     1      -0.00400723668978553, -0.00255605013467344, -0.00170317615421141, -0.00204042057882375, -0.00358961151902558,
     1      -0.00755476059376392, -0.00812678237342369, -0.00629773345694908, -0.00193473747610703, 0.000540012774488294,
     1      0.00214131525339182, 0.00122238039154492, -0.00215278384414996, -0.00462114847977663, -0.00863524911340661/
      Data gm / 4.2542, 4.2542, 4.2386, 4.2519, 4.296, 4.3578, 4.5455, 4.7603, 4.8963, 5.0644, 5.1371, 5.188, 5.2164, 5.1954,
     1      5.0899, 4.7854, 4.3304, 4.1667, 4.0029, 3.8949, 3.7928, 3.7443, 3.709, 3.6632, 3.623/
      Data phi1 / -0.495117853043077, -0.495117853043077, -0.486937271935439, -0.476934166316566, -0.461711595080219,
     1      -0.444512512093825, -0.423067885770678, -0.440786048766373, -0.454699191928289, -0.483160893946246, -0.498472875843845,
     1      -0.510388096539616, -0.524579693588633, -0.57786783775584, -0.62231921014123, -0.640207000667697, -0.77744017182197,
     1      -0.88016132249611, -0.970289132476145, -0.978205396429725, -0.996982646440291, -0.999903132506138, -0.967067027725684,
     1      -0.880204381174846, -0.802423619903068/
      Data phi2 / -0.1417, -0.1417, -0.1364, -0.1403, -0.1591, -0.1862, -0.2538, -0.2943, -0.3077, -0.3113, -0.3062, -0.2927,
     1      -0.2662, -0.2405, -0.1975, -0.1633, -0.1028, -0.0699, -0.0425, -0.0302, -0.0129, -0.0016, 0, 0, 0/
      Data phi3 / -4.96041757793564, -4.96041757793564, -4.92276178884602, -4.91251089610306, -4.96513625402504, -5.04104295651768,
     1      -5.16134191152096, -5.18427465050738, -5.16799110487246, -5.14216868405811, -5.1228525972173, -5.09276768363488,
     1      -5.04538203042609, -5.00505091580236, -4.94414555282742, -4.90155669907002, -4.81342512480855, -4.77429914899606,
     1      -4.86562627218628, -5.34080741816899, -6.30453280595018, -6.48707320506911, -6.54311216539423, -6.59367473267582,
     1      -6.59953555531281/
      Data phi4 / -2.28130316824122, -2.28130316824122, -2.22229626176524, -2.12119730536018, -2.01259817873199, -1.90429902597891,
     1      -1.65759927434112, -1.4668018434511, -1.37369802906703, -1.32250111763273, -1.3277990635296, -1.36550006882328,
     1      -1.4629983153057, -1.5736992160094, -1.79900163048511, -2.01119988561788, -2.46330564055044, -2.83710591027157,
     1      -3.44869787781101, -3.92632479013901, -4.64152301545389, -5.22525279569103, -5.73744267614884, -6.78200407367658,
     1      -7.57134365730054/
      Data phi5 / 0.123790392326453, 0.123790392326453, 0.122085061000195, 0.124067312794112, 0.131759301635619, 0.142345432287797,
     1      0.166089530281892, 0.189041259587371, 0.179097115599691, 0.158033112380444, 0.138419563263086, 0.117610235180921,
     1      0.113214950210755, 0.108641249845724, 0.109834885229066, 0.0891870961945205, 0.077818193600786, 0.0816052270055997,
     1      0.15609806082559, 0.208065905730029, 0.25476022675178, 0.239629693652289, 0.233671524012721, 0.221987195100417,
     1      0.173323672829449/
      Data phi6 / 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
     1      300, 300, 300/
      Data tau1 / 0.4, 0.4, 0.40260697107594, 0.406254677901244, 0.409536599100115, 0.412362151356064, 0.417868294570895,
     1      0.421889928589278, 0.424427487574697, 0.427481452707345, 0.429157682348667, 0.431284929241235, 0.434101130455258,
     1      0.436302393283048, 0.439579110622969, 0.441948893180584, 0.445868511544276, 0.448355188391465, 0.451470005001172,
     1      0.453423408395737, 0.455849456889221, 0.457360780855491, 0.458424490145996, 0.460138736069957, 0.461201624142458/
      Data tau2 / 0.26, 0.26, 0.2637242443942, 0.268935254144634, 0.273623713000165, 0.277660216222949, 0.285526135101279,
     1      0.291271326556111, 0.294896410820996, 0.29925921815335, 0.301653831926667, 0.304692756058908, 0.308715900650368,
     1      0.311860561832925, 0.316541586604241, 0.319926990257977, 0.325526445063252, 0.329078840559236, 0.333528578573103,
     1      0.336319154851053, 0.339784938413173, 0.341943972650702, 0.343463557351422, 0.345912480099939, 0.347430891632083/
      Data sigma1 / 0.491174072226289, 0.491174072226289, 0.490392102266757, 0.49884629286719, 0.504893375136174,
     1      0.509564336873576, 0.517904200145505, 0.523587992281292, 0.526987000584287, 0.530830818870199, 0.532795897236441,
     1      0.535092985589259, 0.537693444822054, 0.539459005039374, 0.542235827503619, 0.543286483861406, 0.529446500271604,
     1      0.510487062001946, 0.478270612673322, 0.468082689790949, 0.461651268718433, 0.457088102848047, 0.453548636419445,
     1      0.447117215346928, 0.442554049476542/
      Data sigma2 / 0.376232982006498, 0.376232982006498, 0.376232982006498, 0.384851051972815, 0.390965669923574,
     1      0.395708536077288, 0.404326606043605, 0.410441223994364, 0.414316427806967, 0.419059293960682, 0.421719608502208,
     1      0.42517391191144, 0.429916778065155, 0.433791981877758, 0.439906599828517, 0.444649465982231, 0.453267535948548,
     1      0.459382153899307, 0.468000223865624, 0.468082689790949, 0.461651268718433, 0.457088102848047, 0.453548636419445,
     1      0.447117215346928, 0.442554049476542/
      Data sigma3 / 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.7999, 0.7997, 0.7988, 0.7966, 0.7792, 0.7504,
     1      0.7136, 0.7035, 0.7006, 0.7001, 0.7, 0.7, 0.7/
      Data gscaleJapIt / 1.581682, 1.581682, 1.574012, 1.554376, 1.550154, 1.539148, 1.480416, 1.40939, 1.368192, 1.324078,
     1      1.307137, 1.293133, 1.314989, 1.351437, 1.405064, 1.440233, 1.52797, 1.652328, 1.887186, 2.134757, 3.575186, 3.864586,
     1      3.729218, 2.376267, 1.767935/
      Data phi1Jp / -0.684621362856666, -0.684621362856666, -0.668104490153807, -0.631364652348356, -0.585522686567435,
     1      -0.545659123699481, -0.468510173737368, -0.498485421565652, -0.560262194908129, -0.645129113225058, -0.698050600056553,
     1      -0.765310551536843, -0.846945325590174, -0.899885267655382, -0.961772613950091, -0.994485940646074, -1.02254530165975,
     1      -1.0001741238606, -0.924505251934862, -0.862638634236657, -0.788170491672007, -0.719494506504419, -0.655991993310966,
     1      -0.520223846723544, -0.406803274628334/
      Data phi5Jp / 0.459, 0.459, 0.458, 0.462, 0.453, 0.436, 0.383, 0.375, 0.377, 0.379, 0.38, 0.384, 0.393, 0.408, 0.462, 0.524,
     1      0.658, 0.78, 0.96, 1.11, 1.291, 1.387, 1.433, 1.46, 1.464/
      Data phi6Jp / 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800,
     1      800, 800, 800/
      Data gscaleWen / 0.75937, 0.75937, 0.760565, 0.76416, 0.767627, 0.773871, 0.795556, 0.79319, 0.776833, 0.743674, 0.721908,
     1      0.692222, 0.657901, 0.636173, 0.604851, 0.550656, 0.358158, 0.200263, 0.035633, 0, 0, 0, 0, 0, 0/
      Data sigma2jap / 0.452832136505141, 0.452832136505141, 0.455081474488854, 0.457089607558063, 0.464232248075043,
     1      0.471593304149618, 0.502235058788957, 0.522972224766759, 0.527828908598616, 0.530427671390517, 0.530985974389397,
     1      0.531176947346726, 0.53091866775, 0.53069348684478, 0.530953922960708, 0.531256171294916, 0.530904125925903,
     1      0.53016308922439, 0.527603492956116, 0.516719512970182, 0.491681001472351, 0.468235579988731, 0.451748161403632,
     1      0.416734686252964, 0.375505067353143/
      Data c8(1:25) / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0991, 0.1982, 0.2154, 0.2154, 0.2154, 0.2154,
     1                0.2154, 0.2154, 0.2154, 0.2154 /


C Find the requested spectral period and corresponding coefficients
      nPer = 25
C First check for the PGA case (i.e., specT=0.0)
      if (specT .eq. 0.0) then
         period1  = period(1)
         c1T      = c1(1)
         c1aT     = c1a(1)
         c1bT     = c1b(1)
         c1cT     = c1c(1)
         c1dT     = c1d(1)
         c3T      = c3(1)
         cHMT     = CHM(1)
         cnT      = cn(1)
         cmT      = cm(1)
         c5T      = c5(1)
         c6T      = c6(1)
         c7T      = c7(1)
         c7bT      = c7b(1)
         c8bT      = c8b(1)
         c9T      = c9(1)
         c9aT      = c9a(1)
         c9bT      = c9b(1)
         c11T      = c11(1)
         c11bT      = c11b(1)
         gamma1T  = gamma1(1)
         gamma2T  = gamma2(1)
         gmT      = gm(1)
         phi1T    = phi1(1)
         phi2T    = phi2(1)
         phi3T    = phi3(1)
         phi4T    = phi4(1)
         phi5T    = phi5(1)
         phi6T    = phi6(1)
         tau1T    = tau1(1)
         tau2T    = tau2(1)
         sigma1T = sigma1(1)
         sigma2T = sigma2(1)
         sigma2JapT = sigma2Jap(1)
         sigma3T = sigma3(1)
         gscaleJapItT = gscaleJapIt(1)
         phi1jpT = phi1jp(1)
         phi5jpT = phi5jp(1)
         phi6jpT = phi6jp(1)
         gscaleWenT = gscaleWen(1)
         c8T = c8(1)
         goto 1011
      elseif (specT .gt. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=2,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020
            endif
         enddo
      endif
C Selected spectral period is outside range defined by attenuaton model.
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
      return
C Interpolate the coefficients for the requested spectral period.
 1020       call S24_interp (period(count1),period(count2),c1(count1),c1(count2),
     +                   specT,c1T,iflag)
            call S24_interp (period(count1),period(count2),c1a(count1),c1a(count2),
     +                   specT,c1aT,iflag)
            call S24_interp (period(count1),period(count2),c1b(count1),c1b(count2),
     +                   specT,c1bT,iflag)
            call S24_interp (period(count1),period(count2),c1c(count1),c1c(count2),
     +                   specT,c1cT,iflag)
            call S24_interp (period(count1),period(count2),c1d(count1),c1d(count2),
     +                   specT,c1dT,iflag)
            call S24_interp (period(count1),period(count2),cn(count1),cn(count2),
     +                   specT,cnT,iflag)
            call S24_interp (period(count1),period(count2),cm(count1),cm(count2),
     +                   specT,cmT,iflag)
            call S24_interp (period(count1),period(count2),cHM(count1),cHM(count2),
     +                   specT,cHMT,iflag)
            call S24_interp (period(count1),period(count2),c3(count1),c3(count2),
     +                   specT,c3T,iflag)
            call S24_interp (period(count1),period(count2),c5(count1),c5(count2),
     +                   specT,c5T,iflag)
            call S24_interp (period(count1),period(count2),c6(count1),c6(count2),
     +                   specT,c6T,iflag)
            call S24_interp (period(count1),period(count2),c7(count1),c7(count2),
     +                   specT,c7T,iflag)
            call S24_interp (period(count1),period(count2),c7b(count1),c7b(count2),
     +                   specT,c7bT,iflag)
            call S24_interp (period(count1),period(count2),c8b(count1),c8b(count2),
     +                   specT,c8bT,iflag)
            call S24_interp (period(count1),period(count2),c9(count1),c9(count2),
     +                   specT,c9T,iflag)
            call S24_interp (period(count1),period(count2),c9a(count1),c9a(count2),
     +                   specT,c9aT,iflag)
            call S24_interp (period(count1),period(count2),c9b(count1),c9b(count2),
     +                   specT,c9bT,iflag)
            call S24_interp (period(count1),period(count2),c11(count1),c11(count2),
     +                   specT,c11T,iflag)
            call S24_interp (period(count1),period(count2),c11b(count1),c11b(count2),
     +                   specT,c11bT,iflag)
            call S24_interp (period(count1),period(count2),gamma1(count1),gamma1(count2),
     +                   specT,gamma1T,iflag)
            call S24_interp (period(count1),period(count2),gamma2(count1),gamma2(count2),
     +                   specT,gamma2T,iflag)
            call S24_interp (period(count1),period(count2),gm(count1),gm(count2),
     +                   specT,gmT,iflag)
            call S24_interp (period(count1),period(count2),phi1(count1),phi1(count2),
     +                   specT,phi1T,iflag)
            call S24_interp (period(count1),period(count2),phi2(count1),phi2(count2),
     +                   specT,phi2T,iflag)
            call S24_interp (period(count1),period(count2),phi3(count1),phi3(count2),
     +                   specT,phi3T,iflag)
            call S24_interp (period(count1),period(count2),phi4(count1),phi4(count2),
     +                   specT,phi4T,iflag)
            call S24_interp (period(count1),period(count2),phi5(count1),phi5(count2),
     +                   specT,phi5T,iflag)
            call S24_interp (period(count1),period(count2),phi6(count1),phi6(count2),
     +                   specT,phi6T,iflag)
            call S24_interp (period(count1),period(count2),tau1(count1),tau1(count2),
     +                   specT,tau1T,iflag)
            call S24_interp (period(count1),period(count2),tau2(count1),tau2(count2),
     +                   specT,tau2T,iflag)
            call S24_interp (period(count1),period(count2),sigma1(count1),sigma1(count2),
     +                   specT,sigma1T,iflag)
            call S24_interp (period(count1),period(count2),sigma2(count1),sigma2(count2),
     +                   specT,sigma2T,iflag)
            call S24_interp (period(count1),period(count2),sigma2Jap(count1),sigma2Jap(count2),
     +                   specT,sigma2JapT,iflag)
            call S24_interp (period(count1),period(count2),sigma3(count1),sigma3(count2),
     +                   specT,sigma3T,iflag)
            call S24_interp (period(count1),period(count2),gscaleJapIt(count1),gscaleJapIt(count2),
     +                   specT,gscaleJapItT,iflag)
            call S24_interp (period(count1),period(count2),phi1jp(count1),phi1jp(count2),
     +                   specT,phi1jpT,iflag)
            call S24_interp (period(count1),period(count2),phi5jp(count1),phi5jp(count2),
     +                   specT,phi5jpT,iflag)
            call S24_interp (period(count1),period(count2),phi6jp(count1),phi6jp(count2),
     +                   specT,phi6jpT,iflag)
            call S24_interp (period(count1),period(count2),gscaleWen(count1),gscaleWen(count2),
     +                   specT,gscaleWenT,iflag)
            call S24_interp (period(count1),period(count2),c8(count1),c8(count2),
     +                   specT,c8T,iflag)
 1011 period1 = specT
c     Set the fault mechanism term.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C      -1       Normal                   -120 < Rake < -60.0
C     1, 0.5    Reverse and Rev/Obl        30 < Rake < 150.0
C     0,-0.5    Strike-Slip and NMl/Obl        Otherwise
         if (ftype .eq. -1) then
            F_RV = 0.0
            F_NM = 1.0
         elseif (ftype .ge. 0.5) then
            F_RV = 1.0
            F_NM = 0.0
         else
            F_RV = 0.0
            F_NM = 0.0
         endif
C     Constant terms
        c2 = 1.06
        c4 = -2.1
        c4a = -0.5
        cRB = 50.0
C        c8 = 0.2154
        c8a = 0.2695
        pi = atan(1.0)*4.0
        d2r = pi/180.0
        cc = c5T* cosh(c6T * max((M-cHMT),0.0))
        gamma = gamma1T + gamma2T/cosh(max((M-gmT),0.0))
C     Apply Regional scaling factor.
C     Regionflag = 0 Global
C     Regionflag = 1 Japan and Italy
C        Also set sigma2 equal to Japan specific value
C     Regionflag = 2 Wenchuan (note only for M7.9)
c        if (regionflag .eq. 1 ) then
c           gamma = gamma * gscaleJapItT
c           sigma2T = sigma2JapT
c        elseif (regionflag .eq. 2) then
c           gamma = gamma * gscaleWenT
c        endif
c        cosDELTA = cos(abs(DELTA)*d2r)
c Magnitude scaling
        r1 = c1T + c2 * (M-6.0) +
     1       (c2-c3T)/cnT *
     1             alog(1.0 + exp(-cnT*(M-cMT)))
c Near-field magnitude and distance scaling
        r2 = c4 * alog(Rrup + cc)
c Distance scaling at large distance
        r3 = (c4a-c4)/2.0 *
     1            alog( Rrup*Rrup+cRB*cRB ) +
     1       Rrup * gamma
c Center Z_TOR on the Z_TOR-M relation in Chiou and Youngs (2013)
        if (F_RV.EQ.1) then
          if (M .le. 5.849) then
              mZ_TOR = 2.704*2.704
          else
              mZ_TOR = max(2.704-1.226*(M-5.849), 0.0)
              mZ_TOR = mZ_TOR * mZ_TOR
          endif
        else
          if (M .le. 4.970) then
              mZ_TOR = 2.673*2.673
          else
              mZ_TOR = max(2.673-1.136*(M-4.970), 0.0)
              mZ_TOR = mZ_TOR * mZ_TOR
          endif
        endif
        deltaZ_TOR = Dtor - 2*mZ_TOR

c Scaling with other source variables (F_RV, F_NM, deltaZ_TOR, and Dip)
        coshM = cosh(2*max(M-4.5,0.0))
        cosDELTA = cos(DELTA*d2r)
        r4 = (c1aT+c1cT/coshM) * F_RV +
     1       (c1bT+c1dT/coshM) * F_NM +
     1       (c7T +c7bT/coshM) * deltaZ_TOR +
     1       (c11T+c11bT/coshM)* cosDELTA**2

c HW effect
        if (HWFlag .eq. 0) then
           hw = 0.0
        else
         hw = c9T * (cosDELTA) * (c9aT+(1-c9aT)
     1        *tanh(abs(Rx)/c9bT)) *
     1          (1.0 - sqrt(Rbjf**2+DTor**2)/(Rrup + 1))
        endif
C     Current version of the code sets cDPP=0 (i.e., no directivity)
c Directivity effect
        cDPP = 0.0
        fd = c8T * exp(-c8aT * (M-c8bT)**2) *
     1       max(0.0, 1.0-max(0.0,Rrup-40.0)/30.0) *
     1       min(max(0.0,M-5.5)/0.8, 1.0) * cDPP
c Predicted median Sa on reference condition (Vs=1130 m/sec)
c        fd = 0.0
        psa_ref = r1+r2+r3+r4+hw+fd
C     Set Phi1, Phi5, and Phi6 term for Japan is region is requested
c        if (regionflag .eq. 1) then
c           phi1T = phi1jpT
c           phi5T = phi5jpT
c           phi6T = phi6jpT
c        endif

c Linear soil amplification
        a = phi1T * min(alog(Vs/1130.0), 0.0)
c Nonlinear soil amplification
        b = phi2T *
     1      (exp(-exp(phi3T)*(min(Vs,1130.0)-360.0)) - exp(-exp(phi3T)*(1130.0-360.0)))
        c = exp(phi4T)
C Deviation from ln(Vs30) scaling: bedrock depth (Z1) effect.
c        if (regionflag .eq. 1) then
c           deltaZ1 = depthvs10*1000.0 -
c     1     exp(-5.23/2.0 * alog((VS**2.0 + 412.0**2.0)/(1360.0**2.0 + 412.0**2.0)))
c        else
           deltaZ1 = depthvs10*1000.0 -
     1     exp(-2.63 / 4.0 * alog((VS**4.0 + 253.0**4.0)/(2492.0**4.0 + 253.0**4.0)))
c        endif
        rkdepth = phi5T * ( 1.0 - exp(-deltaZ1/phi6T ) )
c Sa on soil condition
        psa = psa_ref + (a + b * alog((exp(psa_ref)+c)/c)) + rkdepth
C Compute the sigma term
        NL0 = b * exp(psa_ref)/(exp(psa_ref)+c)
        tau = tau1T +
     1            (tau2T-tau1T)/1.5*(min(max(M,5.0),6.5)-5.0)
        sigma_NL0 = sigma1T +
     1              (sigma2T-sigma1T)/1.5*(min(max(M,5.0),6.5)-5.0)
C     Current code set for Measured Vs30 values (i.e., Vs30class=1)
      if (vs30_class .eq. 0) then
         F_measured = 0.0
         F_Inferred = 1.0
      elseif (vs30_class .eq. 1) then
         F_measured = 1.0
         F_Inferred = 0.0
      endif
        sigma_NL0 = sigma_NL0 *
     1        sqrt(0.7*F_Measured+F_Inferred*sigma3T+(1+NL0)**2.0)
        sigma = sqrt((tau*(1.0+NL0))**2.0+sigma_NL0**2.0)
      phi = sigma_NL0
      tau = (tau*(1.0+NL0))

C     Convert ground motion to units of gals.
      lnY = psa + 6.89
      period2 = period1
      return
      end

C  ***** PEER NGA-West 2 MODELS (2013) **********
c ---------------------------------------------------------------------
C ** Idriss (NGA-2013) Horizontal **
C     PEER Report 2013/08
C        NGA-West2 Model for Estimating Average Horizontal Values of
C            Pseudo-Absolute Spectral Accelerations Generated by
C            Crustal Earthquakes
C         I. M. Idriss
C     Notes:
C        Applicable Range (see Abstract):
C           5 <= M <= 8.5
C           Vs>=450 m/sec
C              for Vs>1200 use Vs=1200
C           Rrup <= 150 km
C        Mechanisms: Strike-slip and Norml (0)
C                    Reverse and Oblique (1)
c ---------------------------------------------------------------------
      Subroutine S04_I14_TW_E04 ( m, Rrup, ftype, vs30, specT,
     1                     period2, lnY, sigma, iflag, Ztor )
      implicit none
      integer MAXPER
      parameter (MAXPER=25)
      REAL Period(MAXPER), a1mlt675(MAXPER), a2mlt675(MAXPER), a3mlt675(MAXPER)
      REAL b1mlt675(MAXPER), b2mlt675(MAXPER)
      REAL a1(MAXPER), a2(MAXPER), a3(MAXPER), b1(MAXPER), b2(MAXPER) ,a4(MAXPER)
      real gam(MAXPER), phi(MAXPER), xsi(MAXPER), period1
      REAL M, Rrup, Vs30, specT, sigma
      REAL SOF, period2, lnY, PhiT, gamT, XsiT, ftype, Ztor, a5
      real a1T, a2T, a3T, b1T, b2T, a1mlt675T, a2mlt675T, a3mlt675T, b1mlt675T, b2mlt675T, a4T
      integer iflag, count1, count2, nPer, i


      Data Period / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4,
     1      5, 7.5, 10/
      Data a1mlt675 / 1.71685064584986, 1.71685064584986, 1.77876166629157, 1.92536250277134, 2.40902758641293, 2.859631936143,
     1      2.93099394107436, 3.61835712622066, 3.38293263767327, 3.04156524316998, 3.28039978748316, 3.45038410819511,
     1      3.16616863849086, 3.53647601520311, 3.17395975608739, 3.03648720441387, 2.08200569354534, 0.877460000459805,
     1      0.216213417632509, -1.23963578496273, -2.80372057210227, -3.56608887992888, -4.55737815257571, -5.78609036852066,
     1      -7.22273678696677/
      Data a2mlt675 / 0.528852639669921, 0.528852639669921, 0.516037115360633, 0.492476077090731, 0.357607293500749,
     1      0.236783913545005, 0.228518265363278, 0.191844760129495, 0.249131657210971, 0.330989114828171, 0.335257653142616,
     1      0.346063934766942, 0.404409985365426, 0.388859493480024, 0.461123202179168, 0.50021234991494, 0.695805122055084,
     1      0.943592129322998, 1.03770822530097, 1.20591426565113, 1.3828482598272, 1.34717380241795, 1.38254546549063,
     1      1.29518525654939, 1.31032284619722/
      Data a3mlt675 / 0.0589, 0.0589, 0.0589, 0.0589, 0.0492134623324272, 0.0417, 0.0527, 0.0442, 0.0391188387593093, 0.0329,
     1      0.0267654491028554, 0.0188, 0.0095, -0.0039, -0.0133, -0.0224, -0.0267, -0.0198, -0.0367, -0.0291, -0.0214, -0.024,
     1      -0.0202, -0.0219, -0.0035/
      Data b1mlt675 / 2.9935, 2.9935, 2.9935, 2.9935, 2.92192099200299, 2.8664, 2.9406, 3.019, 2.91472377949414, 2.7871,
     1      2.81929551534672, 2.8611, 2.8289, 2.8423, 2.83, 2.856, 2.7544, 2.7339, 2.68, 2.6837, 2.6907, 2.5782, 2.5468, 2.4478,
     1      2.3922/
      Data b2mlt675 / -0.2287, -0.2287, -0.2287, -0.2287, -0.236077537409605, -0.2418, -0.2513, -0.2516, -0.23900951196997,
     1      -0.2236, -0.223295447827801, -0.2229, -0.22, -0.2284, -0.2318, -0.2337, -0.2392, -0.2398, -0.2417, -0.245, -0.2389,
     1      -0.2514, -0.2541, -0.2593, -0.2586/
      Data xsi / -0.409999751830372, -0.409999751830372, -0.403233611021475, -0.393481052577978, -0.37706088187339,
     1      -0.355814430765091, -0.321300496735889, -0.323366702130062, -0.335833018872878, -0.362629820180182, -0.380383821924299,
     1      -0.38935871479828, -0.407130850107857, -0.467922466005464, -0.514670896613802, -0.543860145153594, -0.70876791754058,
     1      -0.822530157344685, -0.910136480902729, -0.916903880880618, -0.931048836251643, -0.94349528103761, -0.916043672142136,
     1      -0.835331966695324, -0.761357905540046/
      Data gam / -0.00281171552594942, -0.00281171552594942, -0.00289820257356861, -0.00350046984876955, -0.00577140539086469,
     1      -0.00763284577998198, -0.00852343893560511, -0.00773824638190913, -0.00782724759447787, -0.00734771093084663,
     1      -0.00622034033001967, -0.00471131925907849, -0.00360158865115855, -0.0033778158066833, -0.00232228393467311,
     1      -0.000932812535934199, -0.00222731372835322, -0.00290633165497401, -0.00366008106428892, -0.00476789995604717,
     1      -0.00273212517266628, -0.00475317864417355, -0.00509860339188468, -0.00633316100977675, -0.00643937122066843/
      Data phi / 0.173688616576542, 0.173688616576542, 0.174464843218782, 0.176059052545283, 0.182307217395956, 0.186414664900519,
     1      0.18044164297813, 0.18598354274442, 0.175314142592085, 0.151918884140306, 0.146073813578121, 0.157299856583112,
     1      0.161995973984013, 0.151671212694175, 0.1338550576422, 0.120877380466125, 0.145695260398602, 0.158201912612096,
     1      0.153992092718155, 0.148919063082084, 0.0844120327268032, 0.0211462842495985, 0.0199788102248451, -0.116039977911879,
     1      -0.0450237899128813/
      Data a1 / 9.0138, 9.0138, 9.0408, 9.1338, 8.48609726910026, 7.9837, 7.756, 9.4252, 9.51468239707057, 9.6242,
     1      10.2793352298525, 11.13, 11.3629, 11.7818, 11.6097, 11.4484, 10.9065, 9.8565, 8.3363, 6.8656, 4.1178, 1.8102, 0.0977,
     1      -3.0563, -4.4387/
      Data a2 / -0.0794, -0.0794, -0.0794, -0.0794, -0.142981982713312, -0.1923, -0.1614, -0.1887, -0.133751512954654, -0.0665,
     1      -0.111443199125889, -0.1698, -0.1766, -0.2798, -0.3048, -0.2911, -0.3097, -0.2565, -0.232, -0.1226, 0.1724, 0.3001,
     1      0.4609, 0.6948, 0.8393/
      Data a3 / 0.0589, 0.0589, 0.0589, 0.0589, 0.0492134623324272, 0.0417, 0.0527, 0.0442, 0.0391188387593093, 0.0329,
     1      0.0267654491028554, 0.0188, 0.0095, -0.0039, -0.0133, -0.0224, -0.0267, -0.0198, -0.0367, -0.0291, -0.0214, -0.024,
     1      -0.0202, -0.0219, -0.0035/
      Data b1 / 2.9935, 2.9935, 2.9935, 2.9935, 2.88424486584249, 2.7995, 2.8143, 2.8131, 2.63143724413814, 2.4091,
     1      2.44595081283604, 2.4938, 2.3773, 2.3772, 2.3413, 2.3477, 2.2042, 2.1493, 2.0408, 2.0013, 1.9408, 1.7763, 1.703,
     1      1.5212, 1.4195/
      Data b2 / -0.2287, -0.2287, -0.2287, -0.2287, -0.230502146542804, -0.2319, -0.2326, -0.2211, -0.197043174656907, -0.1676,
     1      -0.167991567078541, -0.1685, -0.1531, -0.1595, -0.1594, -0.1584, -0.1577, -0.1532, -0.147, -0.1439, -0.1278, -0.1326,
     1      -0.1291, -0.122, -0.1145/
      data a4 / 0.034345982, 0.034345982, 0.034178643, 0.034303764, 0.033911183, 0.033619895, 0.035247655,
     1           0.0379925, 0.038355387, 0.037966827, 0.037984881, 0.037240959, 0.035830469, 0.035193632,
     1           0.033500003, 0.031625775, 0.030589191, 0.030691086, 0.028359981, 0.027695125, 0.021529407,
     1           0.016492213, 0.014525774, 0.013942019, 0.009132389 /

C Find the requested spectral period and corresponding coefficients
      nPer = 25
C First check for the PGA case (i.e., specT=0.0)
      if (specT .eq. 0.0) then
         period1 = period(1)
         a1T     = a1(1)
         a2T     = a2(1)
         a3T     = a3(1)
         a4T     = a4(1)
         b1T     = b1(1)
         b2T     = b2(1)
         a1mlt675T = a1mlt675(1)
         a2mlt675T = a2mlt675(1)
         a3mlt675T = a3mlt675(1)
         b1mlt675T = b1mlt675(1)
         b2mlt675T = b2mlt675(1)
         xsiT   = xsi(1)
         gamT   = gam(1)
         phiT   = phi(1)
         goto 1011
      elseif (specT .gt. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=2,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020
            endif
         enddo
      endif
C Selected spectral period is outside range defined by attenuaton model.
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
      return
C Interpolate the coefficients for the requested spectral period.
 1020       call S24_interp (period(count1),period(count2),a1(count1),a1(count2),
     +                   specT,a1T,iflag)
            call S24_interp (period(count1),period(count2),a2(count1),a2(count2),
     +                   specT,a2T,iflag)
            call S24_interp (period(count1),period(count2),a3(count1),a3(count2),
     +                   specT,a3T,iflag)
            call S24_interp (period(count1),period(count2),a4(count1),a4(count2),
     +                   specT,a4T,iflag)
            call S24_interp (period(count1),period(count2),b1(count1),b1(count2),
     +                   specT,b1T,iflag)
            call S24_interp (period(count1),period(count2),b2(count1),b2(count2),
     +                   specT,b2T,iflag)
            call S24_interp (period(count1),period(count2),a1mlt675(count1),a1mlt675(count2),
     +                   specT,a1mlt675T,iflag)
            call S24_interp (period(count1),period(count2),a2mlt675(count1),a2mlt675(count2),
     +                   specT,a2mlt675T,iflag)
            call S24_interp (period(count1),period(count2),a3mlt675(count1),a3mlt675(count2),
     +                   specT,a3mlt675T,iflag)
            call S24_interp (period(count1),period(count2),b1mlt675(count1),b1mlt675(count2),
     +                   specT,b1mlt675T,iflag)
            call S24_interp (period(count1),period(count2),b2mlt675(count1),b2mlt675(count2),
     +                   specT,b2mlt675T,iflag)
            call S24_interp (period(count1),period(count2),phi(count1),phi(count2),
     +                   specT,phiT,iflag)
            call S24_interp (period(count1),period(count2),gam(count1),gam(count2),
     +                   specT,gamT,iflag)
            call S24_interp (period(count1),period(count2),xsi(count1),xsi(count2),
     +                   specT,xsiT,iflag)
 1011 period1 = specT
C.....Compute the Ground motion.......
C.....Set the mechanism term.....................
C     Strike-slip and normal events --> SOF = 0
C     Reverse and oblique events     --> SOF = 1
C     Otherwise assume SOF = 0
      if (ftype .gt. 0.0) then
         SOF = 1.0
      else
         SOF = 0.0
      endif

      a1T = a1mlt675T + (a2mlt675T - a2T) * 6.75
	  a5 = 10.0

      if (m .le. 6.75) then
         lnY = a1mlt675T + a2mlt675T*m + a3mlt675T*(8.5 - m)**2.0 - (b1mlt675T+b2mlt675T*m) * alog(Rrup+10.0) +
     1         xsiT*alog(Vs30) + gamT*rRup + SOF*phiT + a4T * min(max(Ztor, a5), 50.0)
      else
         lnY = a1T + a2T*m + a3T*(8.5 - m)**2.0 - (b1T+b2T*m) * alog(Rrup+10.0) +
     1         xsiT*alog(Vs30) + gamT*rRup + SOF*phiT + a4T * min(max(Ztor, a5), 50.0)
      endif
C     Convert ground motion to units of gals.
      lnY = lnY + 6.89
C     Compute Sigma which is Period and magnitude dependent.
C     Note report does not state a limit on sigma for M<5 but
C     Since model is only applicable for M>=5 a limit is retained
C     for sigma with M<5 equal to M=5 values.
      if (specT .le. 0.05) then
         if (m .le. 5.0) then
            sigma = 1.18 + 0.035*alog(0.05) - 0.06*5.0
         elseif (m .ge. 7.5) then
            sigma = 1.18 + 0.035*alog(0.05) - 0.06*7.5
         else
            sigma = 1.18 + 0.035*alog(0.05) - 0.06*m
         endif
      elseif (specT .ge. 3.0) then
         if (m .le. 5.0) then
            sigma = 1.18 + 0.035*alog(3.00) - 0.06*5.0
         elseif (m .ge. 7.5) then
            sigma = 1.18 + 0.035*alog(3.00) - 0.06*7.5
         else
            sigma = 1.18 + 0.035*alog(3.00) - 0.06*m
         endif
      else
         if (m .le. 5.0) then
            sigma = 1.18 + 0.035*alog(specT) - 0.06*5.0
         elseif (m .ge. 7.5) then
            sigma = 1.18 + 0.035*alog(specT) - 0.06*7.5
         else
            sigma = 1.18 + 0.035*alog(specT) - 0.06*m
         endif
      endif
      period2 = period1
      return
      end

c ---------------------------------------------------------------------------

      subroutine S04_CB14_TW_E05 ( mag, Rrup, Rbjf, Ftype, specT,
     1                     period2, lnY, sigma, iflag, vs,
     2                     depthtop, D25, Dip, depth, HWflag, Rx, rupwidth, regionflag, phi, tau )

C     Last Updated: 5/17/17
C     Coefficients updated from PEER Report version to be consistent with EQ Spectra paper in press.
C     Minor change to T=5, 7.5, and 10 sec for coefficient C6

      parameter (MAXPER=25)
      REAL Period(MAXPER), C0(MAXPER), C1(MAXPER), C2(MAXPER), C3(MAXPER), C4(MAXPER), C5(MAXPER)
      REAL C6(MAXPER), C7(MAXPER), C8(MAXPER), C9(MAXPER), C10(MAXPER), C11(MAXPER), C12(MAXPER)
      REAL C13(MAXPER), C14(MAXPER), C15(MAXPER), C16(MAXPER), C17(MAXPER), C18(MAXPER), C19(MAXPER)
      REAL A2(MAXPER), h1(MAXPER), h2(MAXPER), h3(MAXPER), h4(MAXPER)
      REAL h5(MAXPER), h6(MAXPER)
      REAL K1(MAXPER), K2(MAXPER), K3(MAXPER)
      REAL C20(MAXPER), DC20CA(MAXPER), DC20JP(MAXPER), DC20CH(MAXPER)
      REAL T1(MAXPER), T2(MAXPER), phi1(MAXPER), Phi2(MAXPER), phic(MAXPER)
      REAL flnAF(MAXPER), rho(MAXPER)

      REAL MAG, RRUP, RBJF, VS, D25, FHWR, FHWM, FHWZ, FHWD, PGAROCK, C, N
      real lnY, ftype, Dip, pgasoil, Rx, R1, R2, f1, f2
      real fhypH, D25_RK
      INTEGER count1, count2, HWFlag, regionflag, iflag

      real c0T, c1T, c2T, c3T, c4T, c5T, c6T, c7T, c8T, c9T, c10T, c11T, c12T
      real c13T, c14T, c15T ,c16T, c17T, c18T, c19T, c20T, Dc20CAT, Dc20JPT, Dc20CHT
      real k1T, k2T, k3T, a2T, h1T, h2T, h3T, h4T, h5T, h6T
      real t1T, t2T, phi1T, phi2T, phicT
      real rhoT, flnAFT

      real alpha, tau, depthtop, depth, rupwidth, specT, period2, sigma
      real tau_lnyB, tau_lnPGAB, phi_lnY, phi_lnyB, phi_lnPGAB, phi, sigmatot

C.....MODEL COEFFICIENTS.....................

      Data Period / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4,
     1      5, 7.5, 10/
      Data c0 / 0.335093047810229, 0.351983138983978, 0.391664799222186, 0.480136356183228, 0.641529297579733, 0.82188120439914,
     1      1.19798152569248, 1.32463106269343, 1.3182111773268, 1.23786207049298, 1.17310035741048, 1.09596095473213,
     1      0.817547341300483, 0.569893713035775, 0.248317116508005, -0.0557086278316989, -0.898682094186014, -1.44551136634166,
     1      -2.44640589145251, -2.92728614327044, -3.74974403104352, -4.35687560387378, -4.90171652535439, -5.41286572183955,
     1      -6.00453776820377/
      Data c1 / 0.723018626766693, 0.76923053586393, 0.746659591778324, 0.705276848354753, 0.667081586168126, 0.589258437601297,
     1      0.585904684521786, 0.734594671263828, 0.87979012976083, 1.03046934140068, 1.07123988953934, 1.15880253917983,
     1      1.26367510891572, 1.39239252903295, 1.62015530388173, 1.69555434775151, 2.14365561022274, 2.43294493581605,
     1      2.48341437559922, 2.51106466415091, 2.59601777463608, 3.29009556992616, 3.05440516654319, 2.42612031645475,
     1      1.2805453253274/
      Data c2 / 0.582382030368516, 0.548276929260374, 0.547314123358948, 0.546705112037665, 0.540056592867299, 0.516455399622689,
     1      0.535858038675047, 0.520460985630314, 0.63206103275597, 0.752652287959249, 0.794904011310226, 0.821406760373195,
     1      0.805438888112464, 0.82157932533524, 0.95711703484122, 1.06774878746493, 1.27846012307265, 1.55669349721454,
     1      1.88847628445144, 2.03025576587569, 2.12029432816302, 2.25744390137846, 2.42438178382811, 1.89305011622601,
     1      1.66640016976192/
      Data c3 / -0.17376145698123, 0.113398391799347, 0.117582734720799, 0.100296134767346, 0.0395073633176415,
     1      -0.00999677104319945, -0.111157212017641, -0.0377898768562306, -0.0567913232402645, 0.0585226979400388,
     1      0.116550362476395, 0.204916066823206, 0.378548290064969, 0.468826328904193, 0.681767427902487, 0.809717324614938,
     1      1.0301365781875, 1.27535046528841, 1.22484767070439, 1.37539927263016, 1.66802552597525, 2.06876921469128,
     1      2.54220014838118, 3.12904314886059, 3.0514290877133/
      Data c4 / -0.474, -0.474, -0.464, -0.452, -0.446368292053737, -0.442, -0.437, -0.417, -0.401261889962462, -0.382,
     1      -0.384610447190274, -0.388, -0.383, -0.37, -0.301, -0.266, -0.221, -0.123, 0.066, 0.14, 0.313, 0.467, 0.544, 0.559,
     1      0.417/
      Data c5 / -2.773, -2.773, -2.772, -2.782, -2.78706853715164, -2.791, -2.745, -2.633, -2.55430944981231, -2.458,
     1      -2.44190224232664, -2.421, -2.392, -2.376, -2.303, -2.296, -2.232, -2.158, -2.063, -2.104, -2.051, -1.986, -2.021,
     1      -2.179, -2.244/
      Data c6 / 0.248, 0.248, 0.247, 0.246, 0.242620975232242, 0.24, 0.227, 0.21, 0.197859172256757, 0.183, 0.182564925468288,
     1      0.182, 0.189, 0.195, 0.185, 0.186, 0.186, 0.169, 0.158, 0.158, 0.148, 0.135, 0.135, 0.165, 0.18/
      Data c7 / 6.768, 6.753, 6.502, 6.291, 6.30564244066028, 6.317, 6.861, 7.294, 7.62539963136186, 8.031, 8.18501638422618,
     1      8.385, 7.534, 6.99, 7.012, 6.902, 5.522, 5.65, 5.795, 6.632, 6.759, 7.978, 8.538, 8.468, 6.564/
      Data c8 / -0.0569703754274623, -0.0100762198849894, -0.0109390716992389, -0.018000792352, -0.024235150820661,
     1      -0.0259397807540723, -0.0345381504830972, -0.0111793533676018, -0.01961170589007, -0.026725795799002,
     1      -0.0271575498062692, 0.006939002639218, 0.0371637790899891, 0.0557042454003613, 0.0588682536305066, 0.063859150342796,
     1      0.136363714907047, 0.13480261954914, 0.130720642420933, 0.133979703679808, 0.0724452288941395, 0.0157343198390952,
     1      0.0042492609773788, -0.0792819595337705, 0.00670187662714426/
      Data c9 / -0.212, -0.214, -0.208, -0.213, -0.230458294633416, -0.244, -0.266, -0.229, -0.220906114837838, -0.211,
     1      -0.190116422477806, -0.163, -0.15, -0.131, -0.159, -0.153, -0.09, -0.105, -0.058, -0.028, 0, 0, 0, 0, 0/
      Data c10 / 0.72, 0.72, 0.73, 0.759, 0.796732443239964, 0.826, 0.815, 0.831, 0.794127856483483, 0.749, 0.755526117975686,
     1      0.764, 0.716, 0.737, 0.738, 0.718, 0.795, 0.556, 0.48, 0.401, 0.206, 0.105, 0, 0, 0/
      Data c11 / 0.9388705546745, 0.948575269196186, 0.993472316704622, 1.06377202850532, 1.12506666052944, 1.18052683161614,
     1      1.35342376723162, 1.5255133424148, 1.67508288178791, 1.84797588155146, 1.96251994563968, 2.1263747186292,
     1      2.34088720935678, 2.44781132569501, 2.57455153248388, 2.56737766230058, 2.09973952793916, 1.46652488636632,
     1      0.290614567997193, -0.566265658925559, -0.927671102759077, -0.935440318255442, -0.905182604795051, -0.824192926747527,
     1      -0.766146783910017/
      Data c12 / 2.186, 2.191, 2.189, 2.164, 2.14935755933972, 2.138, 2.446, 2.969, 3.2275546649024, 3.544, 3.61491714866912,
     1      3.707, 3.343, 3.334, 3.544, 3.016, 2.616, 2.47, 2.108, 1.327, 0.601, 0.568, 0.356, 0.075, -0.027/
      Data c13 / 1.42, 1.416, 1.453, 1.476, 1.51711146800772, 1.549, 1.772, 1.916, 2.02616677026276, 2.161, 2.29326265764056,
     1      2.465, 2.766, 3.011, 3.203, 3.333, 3.054, 2.562, 1.453, 0.657, 0.367, 0.306, 0.268, 0.374, 0.297/
      Data c14 / -0.0064, -0.007, -0.0167, -0.0422, -0.0557724161504944, -0.0663, -0.0794, -0.0294, 0.0126882028432437, 0.0642,
     1      0.0783834297338236, 0.0968, 0.1441, 0.1597, 0.141, 0.1474, 0.1764, 0.2593, 0.2881, 0.3112, 0.3478, 0.3747, 0.3382,
     1      0.3754, 0.3506/
      Data c15 / -0.202, -0.207, -0.199, -0.202, -0.279154398863807, -0.339, -0.404, -0.416, -0.411953057418919, -0.407,
     1      -0.365232844955611, -0.311, -0.172, -0.084, 0.085, 0.233, 0.411, 0.479, 0.566, 0.562, 0.534, 0.522, 0.477, 0.321, 0.174/
      Data c16 / 0.393, 0.39, 0.387, 0.378, 0.331256824046015, 0.295, 0.322, 0.384, 0.398838789463964, 0.417, 0.411344031087739,
     1      0.404, 0.466, 0.528, 0.54, 0.638, 0.776, 0.771, 0.748, 0.763, 0.686, 0.691, 0.67, 0.757, 0.621/
      Data c17 / 0.0645383794856222, 0.0657962877798967, 0.0664619533475307, 0.0671935057558888, 0.0675290599349501,
     1      0.0682878362543006, 0.0667416957763312, 0.0674023297085519, 0.0659884697784512, 0.0651695636645009, 0.0657845186239398,
     1      0.0642396102150384, 0.0631366384677199, 0.0604817336964761, 0.0569417635049725, 0.0532085062942838, 0.0457272916435991,
     1      0.0439923447205022, 0.0344872404738479, 0.0319850189076888, 0.0224746623950968, 0.012911468121748, 0.0161784929461332,
     1      0.0263137791585881, 0.0285809717700681/
      Data c18 / 0.0587992463139723, 0.031551652901079, 0.0310646621980837, 0.0317510822112648, 0.0344353254061649,
     1      0.0359754970453913, 0.0396525794316812, 0.0380584543140422, 0.0421865523728087, 0.0422123038395977, 0.040654194566602,
     1      0.0381399423031852, 0.0302700235769742, 0.0247168737031733, 0.0236645391552053, 0.019780083453734, 0.0146412584489922,
     1      0.0135373369523852, 0.0322768710375305, 0.0314997066099382, 0.0193706012367015, -0.00969879107064587,
     1      -0.0432513570690934, -0.0941747977724573, -0.0823344155286154/
      Data c19 / 0.00757, 0.00755, 0.00759, 0.0079, 0.00797321220330142, 0.00803, 0.00811, 0.00744, 0.0073140951196997, 0.00716,
     1      0.00703817913112053, 0.00688, 0.00556, 0.00458, 0.00401, 0.00388, 0.0042, 0.00409, 0.00424, 0.00448, 0.00345, 0.00603,
     1      0.00805, 0.0028, 0.00458/
      Data c20 / -0.00634813007182598, -0.00634726499913435, -0.00625681860523333, -0.00650954432760824, -0.00685797038214189,
     1      -0.00732353722115189, -0.00859294805144714, -0.00946052167518335, -0.00948362932067619, -0.00878015959373452,
     1      -0.00826846734104271, -0.00751759793134993, -0.00705019712409618, -0.0066510144444269, -0.00500810118556177,
     1      -0.00344975891987256, -0.00344009816618098, -0.00347600014315439, -0.00436750799911943, -0.00536369094637663,
     1      -0.00277649854773078, -0.00175430069690324, -0.000972176857147457, -0.00122656065080374, -0.00177728087421456/
      Data k1 / 865, 865, 865, 908, 990.222936015443, 1054, 1086, 1032, 962.752315834834, 878, 821.44031087739, 748, 654, 587, 503,
     1      457, 410, 400, 400, 400, 400, 400, 400, 400, 400/
      Data k2 / -1.186, -1.186, -1.219, -1.273, -1.31411146800772, -1.346, -1.471, -1.624, -1.76204570804354, -1.931,
     1      -2.04281415465008, -2.188, -2.381, -2.518, -2.657, -2.669, -2.401, -1.955, -1.025, -0.299, 0, 0, 0, 0, 0/
      Data k3 / 1.839, 1.839, 1.84, 1.841, 1.84212634158925, 1.843, 1.845, 1.847, 1.84924830143393, 1.852, 1.85374029812685, 1.856,
     1      1.861, 1.865, 1.874, 1.883, 1.906, 1.929, 1.974, 2.019, 2.11, 2.2, 2.291, 2.517, 2.744/
      Data a2 / 0.167, 0.168, 0.166, 0.167, 0.170379024767758, 0.173, 0.198, 0.174, 0.184791846882883, 0.198, 0.200610447190274,
     1      0.204, 0.185, 0.164, 0.16, 0.184, 0.216, 0.596, 0.596, 0.596, 0.596, 0.596, 0.596, 0.596, 0.596/
      Data h1 / 0.241, 0.242, 0.244, 0.246, 0.248815853973132, 0.251, 0.26, 0.259, 0.256751698566066, 0.254, 0.246603732960889,
     1      0.237, 0.206, 0.21, 0.226, 0.217, 0.154, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117/
      Data h2 / 1.474, 1.471, 1.467, 1.467, 1.45686292569673, 1.449, 1.435, 1.449, 1.45439592344144, 1.461, 1.47100671422938,
     1      1.484, 1.581, 1.586, 1.544, 1.554, 1.626, 1.616, 1.616, 1.616, 1.616, 1.616, 1.616, 1.616, 1.616/
      Data h3 / -0.715, -0.714, -0.711, -0.713, -0.706241950464484, -0.701, -0.695, -0.708, -0.711147622007507, -0.715,
     1      -0.717610447190274, -0.721, -0.787, -0.795, -0.77, -0.77, -0.78, -0.733, -0.733, -0.733, -0.733, -0.733, -0.733,
     1      -0.733, -0.733/
      Data h4 / 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1/
      Data h5 / -0.337, -0.336, -0.339, -0.338, -0.338, -0.338, -0.347, -0.391, -0.417080296633634, -0.449, -0.424635826224107,
     1      -0.393, -0.339, -0.447, -0.525, -0.407, -0.371, -0.128, -0.128, -0.128, -0.128, -0.128, -0.128, -0.128, -0.128/
      Data h6 / -0.27, -0.27, -0.263, -0.259, -0.261252683178505, -0.263, -0.219, -0.201, -0.155134650747747, -0.099,
     1      -0.142072378639526, -0.198, -0.21, -0.121, -0.086, -0.281, -0.285, -0.756, -0.756, -0.756, -0.756, -0.756, -0.756,
     1      -0.756, -0.756/
      Data Dc20CA / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/
      Data Dc20JP / -0.0035, -0.0035, -0.0035, -0.0034, -0.0035689512383879, -0.0037, -0.0037, -0.0034, -0.00322013588528528,
     1      -0.003, -0.00304350745317124, -0.0031, -0.0033, -0.0035, -0.0034, -0.0034, -0.0032, -0.003, -0.0019, -5e-04, 0, 0, 0,
     1      0, 0/
      Data Dc20CH / 0.0036, 0.0036, 0.0036, 0.0037, 0.0038689512383879, 0.004, 0.0039, 0.0042, 0.0042, 0.0042, 0.00415649254682876,
     1      0.0041, 0.0036, 0.0031, 0.0028, 0.0025, 0.0016, 6e-04, 0, 0, 0, 0, 0, 0, 0/
      Data t1 / 0.409, 0.404, 0.417, 0.446, 0.480916589266832, 0.508, 0.504, 0.445, 0.416671401932432, 0.382, 0.363291795136368,
     1      0.339, 0.34, 0.34, 0.356, 0.379, 0.43, 0.47, 0.497, 0.499, 0.5, 0.543, 0.534, 0.523, 0.466/
      Data t2 / 0.322, 0.325, 0.326, 0.344, 0.362584636222669, 0.377, 0.418, 0.426, 0.408463248815315, 0.387, 0.365681347946093,
     1      0.338, 0.316, 0.3, 0.264, 0.263, 0.326, 0.353, 0.399, 0.4, 0.417, 0.393, 0.421, 0.438, 0.438/
      Data phi1 / 0.734, 0.734, 0.738, 0.747, 0.76389512383879, 0.777, 0.782, 0.769, 0.769, 0.769, 0.765519403746301, 0.761, 0.744,
     1      0.727, 0.69, 0.663, 0.606, 0.579, 0.541, 0.529, 0.527, 0.521, 0.502, 0.457, 0.441/
      Data phi2 / 0.492, 0.492, 0.496, 0.503, 0.512573903508648, 0.52, 0.535, 0.543, 0.543, 0.543, 0.546915670785411, 0.552, 0.545,
     1      0.568, 0.593, 0.611, 0.633, 0.628, 0.603, 0.588, 0.578, 0.559, 0.551, 0.546, 0.543/
      Data flnaf / 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,
     1      0.3, 0.3, 0.3/
      Data phic / 0.166, 0.166, 0.166, 0.165, 0.163310487616121, 0.162, 0.158, 0.17, 0.174496602867868, 0.18, 0.182610447190274,
     1      0.186, 0.191, 0.198, 0.206, 0.208, 0.221, 0.225, 0.222, 0.226, 0.229, 0.237, 0.237, 0.271, 0.29/
      Data rho / 1, 1, 0.998, 0.986, 0.958967801857936, 0.938, 0.887, 0.87, 0.872697961720721, 0.876, 0.873389552809726, 0.87,
     1      0.85, 0.819, 0.743, 0.684, 0.562, 0.467, 0.364, 0.298, 0.234, 0.202, 0.184, 0.176, 0.154/


      nPer = 25
      c = 1.88
      n = 1.18

C First check for the PGA case (i.e., specT=0.0)
      if (specT .eq. 0.0) then
         period1 = period(1)
         c0T = c0(1)
         c1T = c1(1)
         c2T = c2(1)
         c3T = c3(1)
         c4T = c4(1)
         c5T = c5(1)
         c6T = c6(1)
         c7T = c7(1)
         c8T = c8(1)
         c9T = c9(1)
         c10T = c10(1)
         c11T = c11(1)
         c12T = c12(1)
         c13T = c13(1)
         c14T = c14(1)
         c15T = c15(1)
         c16T = c16(1)
         c17T = c17(1)
         c18T = c18(1)
         c19T = c19(1)

         a2T = a2(1)
         h1T = h1(1)
         h2T = h2(1)
         h3T = h3(1)
         h4T = h4(1)
         h5T = h5(1)
         h6T = h6(1)

         k1T = k1(1)
         k2T = k2(1)
         k3T = k3(1)
         c20T = c20(1)
         Dc20CAT = Dc20CA(1)
         Dc20JPT = Dc20JP(1)
         Dc20CHT = Dc20CH(1)

         phi1T = phi1(1)
         phi2T = phi2(1)
         t1T = t1(1)
         t2T = t2(1)
         flnAFT = flnaf(1)
         phicT = phic(1)
         rhoT = rho(1)

         goto 1011

      elseif (specT .gt. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=2,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020
            endif
         enddo
      endif

C Selected spectral period is outside range defined by attenuaton model.
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
      return

C Interpolate the coefficients for the requested spectral period.
 1020       call S24_interp (period(count1),period(count2),c0(count1),c0(count2),
     +                   specT,c0T,iflag)
            call S24_interp (period(count1),period(count2),c1(count1),c1(count2),
     +                   specT,c1T,iflag)
            call S24_interp (period(count1),period(count2),c2(count1),c2(count2),
     +                   specT,c2T,iflag)
            call S24_interp (period(count1),period(count2),c3(count1),c3(count2),
     +                   specT,c3T,iflag)
            call S24_interp (period(count1),period(count2),c4(count1),c4(count2),
     +                   specT,c4T,iflag)
            call S24_interp (period(count1),period(count2),c5(count1),c5(count2),
     +                   specT,c5T,iflag)
            call S24_interp (period(count1),period(count2),c6(count1),c6(count2),
     +                   specT,c6T,iflag)
            call S24_interp (period(count1),period(count2),c7(count1),c7(count2),
     +                   specT,c7T,iflag)
            call S24_interp (period(count1),period(count2),c8(count1),c8(count2),
     +                   specT,c8T,iflag)
            call S24_interp (period(count1),period(count2),c9(count1),c9(count2),
     +                   specT,c9T,iflag)
            call S24_interp (period(count1),period(count2),c10(count1),c10(count2),
     +                   specT,c10T,iflag)
            call S24_interp (period(count1),period(count2),c11(count1),c11(count2),
     +                   specT,c11T,iflag)
            call S24_interp (period(count1),period(count2),c12(count1),c12(count2),
     +                   specT,c12T,iflag)
            call S24_interp (period(count1),period(count2),c13(count1),c13(count2),
     +                   specT,c13T,iflag)
            call S24_interp (period(count1),period(count2),c14(count1),c14(count2),
     +                   specT,c14T,iflag)
            call S24_interp (period(count1),period(count2),c15(count1),c15(count2),
     +                   specT,c15T,iflag)
            call S24_interp (period(count1),period(count2),c16(count1),c16(count2),
     +                   specT,c16T,iflag)
            call S24_interp (period(count1),period(count2),c17(count1),c17(count2),
     +                   specT,c17T,iflag)
            call S24_interp (period(count1),period(count2),c18(count1),c18(count2),
     +                   specT,c18T,iflag)
            call S24_interp (period(count1),period(count2),c19(count1),c19(count2),
     +                   specT,c19T,iflag)
            call S24_interp (period(count1),period(count2),a2(count1),a2(count2),
     +                   specT,a2T,iflag)
            call S24_interp (period(count1),period(count2),h1(count1),h1(count2),
     +                   specT,h1T,iflag)
            call S24_interp (period(count1),period(count2),h2(count1),h2(count2),
     +                   specT,h2T,iflag)
            call S24_interp (period(count1),period(count2),h3(count1),h3(count2),
     +                   specT,h3T,iflag)
            call S24_interp (period(count1),period(count2),h4(count1),h4(count2),
     +                   specT,h4T,iflag)
            call S24_interp (period(count1),period(count2),h5(count1),h5(count2),
     +                   specT,h5T,iflag)
            call S24_interp (period(count1),period(count2),h6(count1),h6(count2),
     +                   specT,h6T,iflag)

            call S24_interp (period(count1),period(count2),k1(count1),k1(count2),
     +                   specT,k1T,iflag)
            call S24_interp (period(count1),period(count2),k2(count1),k2(count2),
     +                   specT,k2T,iflag)
            call S24_interp (period(count1),period(count2),k3(count1),k3(count2),
     +                   specT,k3T,iflag)

            call S24_interp (period(count1),period(count2),c20(count1),c20(count2),
     +                   specT,c20T,iflag)
            call S24_interp (period(count1),period(count2),Dc20CA(count1),Dc20CA(count2),
     +                   specT,Dc20CAT,iflag)
            call S24_interp (period(count1),period(count2),Dc20JP(count1),Dc20JP(count2),
     +                   specT,Dc20JPT,iflag)
            call S24_interp (period(count1),period(count2),Dc20CH(count1),Dc20CH(count2),
     +                   specT,Dc20CHT,iflag)

            call S24_interp (period(count1),period(count2),phi1(count1),phi1(count2),
     +                   specT,phi1T,iflag)
            call S24_interp (period(count1),period(count2),phi2(count1),phi2(count2),
     +                   specT,phi2T,iflag)
            call S24_interp (period(count1),period(count2),t1(count1),t1(count2),
     +                   specT,t1T,iflag)
            call S24_interp (period(count1),period(count2),t2(count1),t2(count2),
     +                   specT,t2T,iflag)
            call S24_interp (period(count1),period(count2),flnAF(count1),flnAF(count2),
     +                   specT,flnAfT,iflag)
            call S24_interp (period(count1),period(count2),phic(count1),phic(count2),
     +                   specT,phicT,iflag)
            call S24_interp (period(count1),period(count2),rho(count1),rho(count2),
     +                   specT,rhoT,iflag)

 1011 period1 = specT

C.....COMPUTE ROCK PGA VALUE FIRST.........................
C.....MAGNITUDE DEPENDENCE (Eq 3.2)........................
      IF (MAG .LE. 4.5) THEN
         TERM1 = C0(1) + C1(1)*(MAG-4.5)
      elseif (mag .le. 5.5) then
         TERM1 = C0(1) + c2(1)*(MAG-4.5)
      elseif (mag .le. 6.5) then
         TERM1 = C0(1) + c2(1) + c3(1)*(mag-5.5)
      ELSE
         TERM1 = C0(1) + c2(1) + C3(1) + c4(1)*(mag-6.5)
      ENDIF

C.....Distance dependence (Eq 3.3).....
      R = SQRT( RRUP*RRUP+C7(1)*C7(1) )
      TERM2 = (C5(1) + C6(1)*MAG)*ALOG(R)

C.....SET UP STYLE OF FAULTING TERMS (Eq 3.4, 3.5, and 3.6).........

C     Set mechanism term and corresponding Frv and Fnm values.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C    -1,-0.5    Normal and NMl/Obl       -150 < Rake < -30.0
C     1, 0.5    Reverse and Rev/Obl        30 < Rake < 150.0
C       0       Strike-Slip                    Otherwise
      IF (Ftype .EQ. 0.0) THEN
         TERM3 = 0.0
      ELSEIF (Ftype .ge. 0.5) THEN
         if (mag .le. 4.5) then
            TERM3 = 0.0
         elseif (mag .le. 5.5) then
            TERM3 = C8(1)*(mag-4.5)
         else
            TERM3 = c8(1)
         endif
      ELSEIF (Ftype .le. -0.5) THEN
         if (mag .le. 4.5) then
            TERM3 = 0.0
         elseif (mag .le. 5.5) then
            TERM3 = C9(1)*(mag-4.5)
         else
            TERM3 = C9(1)
         endif
      ENDIF

C.....SET UP HANGING WALL TERMS (Eq 3.7)..............
      if (HWflag .eq. 1) then
         R1 = rupwidth*cos(abs(dip)*3.14159/180.0)
         R2 = 62.0*mag - 350.0
         f1 = h1(1) + h2(1)*(Rx/R1) + h3(1)*(Rx/R1)**2.0
         f2 = h4(1) + h5(1)*((Rx-R1)/(R2-R1)) + h6(1)*((Rx-R1)/(R2-R1))**2.0
         if (Rrup .eq. 0.0) then
            fhwrrup = 1.0
         else
            fhwrrup = ((Rrup-Rbjf)/Rrup)
         endif
         if (Rx .lt. R1) Then
            fhwr = f1*fhwrrup
         else
            fhwr = max(f2,0.0)*fhwrrup
         endif
         if (mag .le. 5.5) then
            fhwm = 0.0
         elseif (mag .le. 6.5) then
            fhwm = (mag-5.5)*(1.0+a2(1)*(mag-6.5))
         else
            fhwm = 1.0 + a2(1)*(mag-6.5)
         endif
         if (depthtop .le. 16.66) then
            fhwz = 1.0 - 0.06*depthtop
         else
            fhwz = 0.0
         endif
         fhwd = (90.0 - dip)/45.0
         TERM4 = c10(1)*fhwr*fhwm*fhwz*fhwd
      else
         term4 = 0.0
      endif

C.....NOW COMPUTE THE SITE CONDITION FACTORS...............
C.....(FOR PGA ROCK, VS=1100, i.e., Vs>k1)
      TERM5_RK = (C11(1) + K2(1)*n)*ALOG( 1100.0/K1(1) )

C.....NOW COMPUTE THE SEDIMENT DEPTH DEPENDENCE (Eq 3.17)............
C     For Rock PGA the D25 value should be set at the recommended value of D25=0.398
      D25_RK = 0.398

      TERM6_RK = C14(1)*(D25_RK-1.0)

C.....Now compute the hypocentral depth term (Eq 3.21).........
      if (depth .le. 7.0) then
         fhypH = 0.0
      elseif (depth .le. 20.0) then
         fhypH = depth - 7.0
      else
         fhypH = 13.0
      endif
      if (mag .le. 5.5) then
          term7 = c17(1)*fhypH
      elseif (mag .le. 6.5) then
          term7 = (c17(1) + (c18(1)-c17(1))*(mag-5.5))*fhypH
      else
          term7 = c18(1)*fhypH
      endif

C.....Compute Rupture Dip term (Eq 3.24)............
      if (mag .le. 4.5) then
          term8 = c19(1)*dip
      elseif (mag .le. 5.5) then
          term8 = c19(1)*(5.5-mag)*dip
      else
          term8 =0
      endif

C.....Compute anelastic attenuation term.....
      if (Rrup .le. 80.0) then
         term9 = 0.0
      else
         term9 = (c20(1)+Dc20CA(1) ) * (Rrup-80.0)

      endif

      PGAROCK = EXP(TERM1+TERM2+TERM3+TERM4+TERM5_RK+TERM6_RK+TERM7+TERM8+TERM9)
C 	  write(*,*) "fmag  = ", TERM1
C 	  write(*,*) "fdis  = ", TERM2
C 	  write(*,*) "fflt  = ", TERM3
C 	  write(*,*) "fhng  = ", TERM4
C 	  write(*,*) "fsite = ", TERM5_RK
C 	  write(*,*) "fsed  = ", TERM6_RK
C 	  write(*,*) "fhyp  = ", TERM7
C 	  write(*,*) "fdip  = ", TERM8
C 	  write(*,*) "fatn  = ", TERM9

C.....For PGA Specific Vs30m Value
      if (vs .le. k1(1) ) then
         term5 = c11(1)*alog(vs/k1(1)) +
     1           k2(1)*(alog(pgarock+c*((vs/k1(1))**n)) -
     2           alog(pgarock+c))
      else
         term5 = (c11(1) + k2(1)*n)*alog(vs/k1(1))
      endif


C.....NOW COMPUTE THE SEDIMENT DEPTH DEPENDENCE (Eq 3.17)............
C     For Rock PGA the D25 value should be set at the recommended value of D25=0.398
      if (D25 .le. 1.0) then
            TERM6 = C14(1)*(D25-1.0)
      elseif (D25 .GT. 1.0 .AND. D25 .LE. 3.0) then
        TERM6 = 0.0
      elseif (D25 .GT. 3.0) then
         TERM6 = c16(1)*k3(1)*exp(-0.75)*(1.0-exp(-0.25*(D25-3.0)))
      endif

      pgasoil = alog(pgarock) - term5_rk - term6_RK + term5 + term6
      psoil2 = (TERM1+TERM2+TERM3+TERM4+TERM5+TERM6+TERM7+TERM8+TERM9)
c 	  write(*,*) "PGAROCK = ", PGAROCK
c 	  write(*,*) "pgasoil = ", pgasoil
c 	  write(*,*) "psoil2  = ", psoil2


C.....NOW COMPUTE THE GROUND MOTION VALUES.................
C.....MAGNITUDE DEPENDENCE.................................
      IF (MAG .LE. 4.5) THEN
         TERM1 = C0T + C1T*(MAG-4.5)
      elseif (mag .le. 5.5) then
         TERM1 = C0T + c2T*(MAG-4.5)
      elseif (mag .le. 6.5) then
         TERM1 = C0T + c2T + c3T*(mag-5.5)
      ELSE
         TERM1 = C0T + c2T + C3T + c4T*(mag-6.5)
      ENDIF

C.....Distance dependence......
      R = SQRT( RRUP*RRUP+C7T*C7T )
      TERM2 = (C5T + C6T*MAG)*ALOG(R)

C.....SET UP STYLE OF FAULTING TERMS...........

C     Set mechanism term and corresponding Frv and Fnm values.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C    -1,-0.5    Normal and NMl/Obl       -150 < Rake < -30.0
C     1, 0.5    Reverse and Rev/Obl        30 < Rake < 150.0
C       0       Strike-Slip                    Otherwise
      IF (Ftype .EQ. 0.0) THEN
         TERM3 = 0.0
      ELSEIF (Ftype .ge. 0.5) THEN
         if (mag .le. 4.5) then
            TERM3 = 0.0
         elseif (mag .le. 5.5) then
            TERM3 = C8T*(mag-4.5)
         else
            TERM3 = C8T
         endif
      ELSEIF (Ftype .le. -0.5) THEN
         if (mag .le. 4.5) then
            TERM3 = 0.0
         elseif (mag .le. 5.5) then
            TERM3 = C9T*(mag-4.5)
         else
            TERM3 = C9T
         endif
      ENDIF

C.....SET UP HANGING WALL TERMS................
      if (HWflag .eq. 1) then
         R1 = rupwidth*cos(abs(dip)*3.14159/180.0)
         R2 = 62.0*mag - 350.0
         f1 = h1T + h2T*(Rx/R1) + h3T*(Rx/R1)**2.0
         f2 = h4T + h5T*((Rx-R1)/(R2-R1)) + h6T*((Rx-R1)/(R2-R1))**2.0
         if (Rrup .eq. 0.0) then
            fhwrrup = 1.0
         else
            fhwrrup = ((Rrup-Rbjf)/Rrup)
         endif
         if (Rx .lt. R1) Then
            fhwr = f1*fhwrrup
         else
            fhwr = max(f2,0.0)*fhwrrup
         endif
         if (mag .le. 5.5) then
            fhwm = 0.0
         elseif (mag .le. 6.5) then
            fhwm = (mag-5.5)*(1.0+a2T*(mag-6.5))
         else
            fhwm = 1.0 + a2T*(mag-6.5)
         endif
         if (depthtop .le. 16.66) then
            fhwz = 1.0 - 0.06*depthtop
         else
            fhwz = 0.0
         endif
         fhwd = (90.0 - dip)/45.0
         TERM4 = c10T*fhwr*fhwm*fhwz*fhwd
      else
         term4 = 0.0
      endif

C.....NOW COMPUTE THE SITE CONDITION FACTORS...............
      IF (VS .LE. K1T ) THEN
         TERM5 = C11T*ALOG( VS/K1T ) +
     1           K2T*( ALOG( PGAROCK+c*( (VS/K1T)**N) ) -
     2           ALOG( PGAROCK+c ) )
      ELSE
         TERM5 = ( C11T+K2T*n )*ALOG( VS/K1T )
      ENDIF

C.....NOW COMPUTE THE SEDIMENT DEPTH DEPENDENCE.............
      IF (D25 .LE. 1.0) THEN
         TERM6 = C14T*(D25-1.0)
      ELSEIF (D25 .GT. 1.0 .AND. D25 .LE. 3.0) THEN
         TERM6 = 0.0
      ELSEIF (D25 .GT. 3.0)  THEN
         TERM6 = c16T*k3T*exp(-0.75)*( 1.0 - exp(-0.25*(D25-3.0)))
      ENDIF

C.....Now compute the hypocentral depth term..........
      if (depth .le. 7.0) then
         fhypH = 0.0
      elseif (depth .le. 20.0) then
         fhypH = depth - 7.0
      else
         fhypH = 13.0
      endif
      if (mag .le. 5.5) then
          term7 = c17T*fhypH
      elseif (mag .le. 6.5) then
          term7 = (c17T + (c18T-c17T)*(mag-5.5))*fhypH
      else
          term7 = c18T*fhypH
      endif

C.....Compute Rupture Dip term.............
      if (mag .le. 4.5) then
          term8 = c19T*dip
      elseif (mag .le. 5.5) then
          term8 = c19T*(5.5-mag)*dip
      else
          term8 = 0
      endif

C.....Compute anelastic attenuation term.....
      if (Rrup .le. 80.0) then
         term9 = 0.0
      else
         term9 = (c20T+Dc20CAT)*(Rrup-80.0)
      endif

      LnY = (TERM1+TERM2+TERM3+TERM4+TERM5+TERM6+TERM7+TERM8+TERM9)

c	  write(*,*) "fmag  = ", TERM1
c	  write(*,*) "fdis  = ", TERM2
c	  write(*,*) "fflt  = ", TERM3
c	  write(*,*) "fhng  = ", TERM4
c	  write(*,*) "fsite = ", TERM5
c	  write(*,*) "fsed  = ", TERM6
c	  write(*,*) "fhyp  = ", TERM7
c	  write(*,*) "fdip  = ", TERM8
c	  write(*,*) "fatn  = ", TERM9
c
c	  write(*,*) "LnY = ", LnY
c	  write(*,*) "Sa = ", exp(LnY)

C    Check that SA is not less than PGA for T<0.25sec
c     if (specT .lt. 0.25) then
c        if (lnY .lt. pgasoil ) then
c           lnY = pgasoil
c        endif
c     endif

C.....Now compute the sigma value..........
      IF (Vs .LT. k1T) THEN
        alpha = k2T*pgarock*(1/(pgarock
     &    +c*(Vs/k1T)**n)
     &    -1/(pgarock + c))
      ELSE
        alpha = 0.0
      ENDIF

      If (Mag.le.4.5) then
  	   tau_lnyB = t1T
       tau_lnPGAB = t1(1)
        elseif (Mag.lt.5.5) then
         tau_lnyB = t2T +
     &          (t1T - t2T)*(5.5-mag)
         tau_lnPGAB = t2(1) +
     &          (t1(1) - t2(1))*(5.5-Mag)
        else
         tau_lnyB = t2T
         tau_lnPGAB = t2(1)
        endif

      tau = SQRT(tau_lnyB**2 +
     &           (alpha * tau_lnPGAB)**2 +
     &           2.0*alpha*rhoT*tau_lnyB*tau_lnPGAB)

      If (Mag.le.4.5) then
             phi_lny = phi1T
           phi_lnPGAB = phi1(1)
      elseif (Mag.lt.5.5) then
      	   phi_lny = phi2T +
     &          (phi1T - phi2T)*(5.5-mag)
             phi_lnPGAB = phi2(1) +
     &          (phi1(1) - phi2(1))*(5.5-mag)
      else
             phi_lny = phi2T
      	   phi_lnPGAB = phi2(1)
      endif

      phi_lnyB = SQRT(phi_lny**2 - flnAFT**2)

      phi_lnPGAB = SQRT(phi_lnPGAB**2 - flnAF(1)**2)

      phi = SQRT(phi_lny**2 +
     &           (alpha*phi_lnPGAB)**2 +
     &           2.0*alpha*rhoT*phi_lnyB*phi_lnPGAB)

      Sigmatot = SQRT(phi**2 + Tau**2)

      period2 = period1

C     Convert ground motion to units of gals.

      lnY = lnY + 6.89
      sigma = sigmaTot

      return
      END

c ------------------------------------------------------------------            
C *** BCHydro Subduction (06/2010 - adjustefd Model Version E ) Horizontal ***********
c ------------------------------------------------------------------            
      subroutine S04_AGA16_TW_F10 ( mag, fType, rRup, vs30, lnSa, sigma1, 
     2           specT, period1, iflag, forearc, Ztor, depth, disthypo )

      implicit none
     
      real mag, fType, rRup, vs30, pgaRock, faba, vs30_rock, period0,
     1     lnSa, sigma, tau, period1, sigma1, disthypo, deltac1,
     2     depth, specT, Ztor
      integer iflag, forearc

c     Ftype defines an interface event or intraslab events      
C     fType    Event Type
C     -------------------
C      0       Interface  - use rupture distance
C      1       Intraslab  - use hypocentral distance
C
C     faba     Note
C     -------------------------
C      0       Forearc site  
C      1       Backarc site  
C
c     compute pga on rock
      period0 = 0.0
      pgaRock = 0.0
      vs30_rock = 1000.
      faba = real(forearc)
      
C     Compute Rock PGA
      call S04_AGA16_TW_F10_model ( mag, rRup, vs30_rock, pgaRock, lnSa, sigma, tau,
     2                     period0, Ftype, iflag, faba, Ztor, depth, disthypo )
      pgaRock = exp(lnSa)
 
C     Compute regular ground motions. 
      call S04_AGA16_TW_F10_model ( mag, rRup, vs30, pgaRock, lnSa, sigma, tau, 
     2                     specT, Ftype, iflag, faba, Ztor, depth, disthypo )

c     compute Sa (given the PGA rock value)
      sigma1 = sqrt( sigma**2 + tau**2 )
      period1 = specT

c     Convert units spectral acceleration in gal                                
      lnSa = lnSa + 6.89                                                
      return
      end
c ----------------------------------------------------------------------
      subroutine S04_AGA16_TW_F10_model ( mag, rRup, vs30, pgaRock, lnSa, sigma, tau, 
     2                     specT, Ftype, iflag, faba, Ztor, depth, disthypo )

      implicit none
      
      integer MAXPER, nPer, i1, i      
      parameter (MAXPER=25)
      real a1(MAXPER), a2(MAXPER),dC1_itf(MAXPER) ,dC1_itb(MAXPER),
     1     a6(MAXPER), a10(MAXPER), a11(MAXPER), a11a(MAXPER),
     1     a12(MAXPER), a13(MAXPER), a14(MAXPER), a4a(MAXPER), a7(MAXPER), a8(MAXPER),
     1     a15(MAXPER), a16(MAXPER)
      real period(MAXPER), b_soil(MAXPER), vLin(MAXPER), sigs(MAXPER), sigt(MAXPER)
      real sigma, lnSa, pgaRock, vs30, rRup, disthypo,
     1     mag, a3, a4, a5, a9 ,a7T , a8T , a15T, a16T
      real a1T, a2T, a6T, a11aT, Ztor, a4aT
      real a10T, a11T, a12T, a13T, a14T, sigsT, sigtT, dC1_itfT, dC1_itbT
      real vLinT, b_soilT, sumgm, Ftype, tau, period1
      integer count1, count2, iflag
      real n, c, c4, c1, deltac1, faba, R, testmag, VsStar, depth, specT
      real base, fmag, fdepth, fsite, fbac

      Data Period(1:25) / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 
     1            0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 7.5, 10/
      Data a1(1:25) / 4.35844293849408, 4.40448385002841, 4.42235073045333, 4.51174431025914, 4.6184756364235, 4.73673816849304,
     1      5.1478261284161, 5.32838098916143, 5.43888858346181, 5.54992742949254, 5.53025724823576, 5.50209585586371,
     1      5.42171283115248, 5.1925226061065, 4.79362720821157, 4.36876337362239, 3.6146095430292, 3.14131767795372,
     1      2.41835445173874, 1.83392549350599, 1.09559787881207, 0.493492034594101, -0.0677174706304278, -1.28769323712076,
     1      -2.3529378451964/
      Data a2(1:25) / -1.35, -1.35, -1.35, -1.37212535246749, -1.3878235398683, -1.4, -1.45, -1.45, -1.45, -1.45,
     1      -1.42824627341438, -1.4, -1.35, -1.28, -1.18, -1.08, -0.91, -0.85, -0.77, -0.71, -0.64, -0.58, -0.54, -0.46, -0.4/
      Data a4a(1:25) / 0.490233295747377, 0.501501976617984, 0.487171144951632, 0.47215353028238, 0.427780842429563,
     1      0.384611647919739, 0.344528924478493, 0.328259792218493, 0.330061667882538, 0.383801593508627, 0.412846285048564,
     1      0.438633622467472, 0.509559046177354, 0.611238357609338, 0.821165221077697, 0.962541509212795, 1.23227360622235,
     1      1.35657920015304, 1.46310710338033, 1.39583793060953, 1.14163314305871, 0.828359653814432, 0.593068337437621,
     1      0.635183263258333, 0.334324407572139/
      Data a6(1:25) / 0, -1.2742310369559e-14, -1.04835518780313e-12, -1.38313281100888e-11, -8.62519073094022e-11,
     1      -3.56734213274011e-10, -4.70651720770408e-09, -2.93495449747076e-08, -9.3620855471152e-08, -3.87178855055009e-07,
     1      -8.58410410760826e-07, -2.41301821846127e-06, -9.95823573287351e-06, -3.15658328071745e-05, -0.000187819964423078,
     1      -0.000663253434661024, -0.00261135688215098, -0.00327342900048902, -0.00342678315937337, -0.0034378736922942,
     1      -0.00343983874290077, -0.00343997413984613, -0.00343999374744544, -0.00343999952608246, -0.00343999992400273/
      Data a10(1:25) / 2.50238267428753, 2.45354985208117, 2.45712506053231, 2.48314913393394, 2.51571572736229, 2.54835614651406,
     1      2.63796917560156, 2.66920174985232, 2.65980457395154, 2.65947307783084, 2.50370194429171, 2.28268053526727,
     1      1.97567149316003, 1.74543072521505, 1.46284974570948, 1.18569521344312, 0.759064884501228, 0.472238540201132,
     1      0.105031115220643, 0.0204724942547022, -0.0563468339410934, -0.0796952941502796, -0.0661674056310574,
     1      -0.0727359608786985, 0.132949225428625/
      Data a11(1:25) / 0.0209645459852199, 0.0211185450539438, 0.020907239199861, 0.0206861754405617, 0.0201992952920322,
     1      0.0200863107159024, 0.0213038771564475, 0.0210506222491249, 0.0212386849173846, 0.021974823626841, 0.0218096375422394,
     1      0.0214497986870152, 0.0209887711470591, 0.0202089910414603, 0.0216695638774524, 0.0211315710615843, 0.0200840312848651,
     1      0.0183419906458299, 0.0169140417758707, 0.0152229673546218, 0.0101721058379849, 0.00751807891402711,
     1      0.00662090116843197, 0.00548671441898383, 0.00608785305167983/
      Data a11a(1:25) / 0.0447925753474416, 0.0454773789670112, 0.0453951448647483, 0.0453555996274611, 0.0460678354504749,
     1      0.0463680385857737, 0.0485682360784842, 0.0516565897099376, 0.05242805478271, 0.0517743795770695, 0.0525758958487427,
     1      0.0513712553416057, 0.0525281422211252, 0.0514609710721228, 0.0465114906308642, 0.0433918508645454, 0.0326061440066766,
     1      0.0253674408634384, 0.0210352047730289, 0.0168769997670818, 0.00818548076208565, 0.0016268028317338,
     1      0.00586285954723722, 0.00358594148454458, -0.01151742409672/
      Data a12(1:25) / 0.943715435182963, 0.947291261826117, 0.952369004446095, 1.04329022070683, 1.12605577830093,
     1      1.19877799169209, 1.34969490713516, 1.50771872006435, 1.64463099510739, 1.80153619895198, 1.89875583891682,
     1      2.05409914544544, 2.2556751074265, 2.39309551778298, 2.51270985429006, 2.54116064397387, 2.12606260531648,
     1      1.58081589874553, 0.445249721776344, -0.380429301270945, -0.666755078187764, -0.622309935348892, -0.611246872553534,
     1      -0.504394400041745, -0.487936169204039/
      Data a13(1:25) / -0.0135, -0.0135, -0.0135, -0.0136327521148049, -0.0137269412392098, -0.0138, -0.0142, -0.0145,
     1      -0.0148597282294294, -0.0153, -0.0156915670785411, -0.0162, -0.0172, -0.0183, -0.0206, -0.0231, -0.0296, -0.0363,
     1      -0.0493, -0.061, -0.0798, -0.0935, -0.098, -0.098, -0.098/
      Data a14(1:25) / -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.378246273414381, -0.35, -0.31, -0.28, -0.23,
     1      -0.19, -0.12, -0.07, 0, 0, 0, 0, 0, 0, 0/
      Data Vlin(1:25) / 865.1, 865.1, 865.1, 948.468328097495, 1007.61909822376, 1053.5, 1085.7, 1032.5, 962.847621576726, 877.6,
     1      821.301355596418, 748.2, 654.3, 587.1, 503, 456.6, 410.5, 400, 400, 400, 400, 400, 400, 400, 400/
      Data b_soil(1:25) / -1.186, -1.186, -1.186, -1.25680112789596, -1.30703532757857, -1.346, -1.471, -1.624, -1.76204570804354,
     1      -1.931, -2.04281415465008, -2.188, -2.381, -2.518, -2.657, -2.669, -2.401, -1.955, -1.025, -0.299, 0, 0, 0, 0, 0/
      Data a7(1:25) / 1.0988, 1.0988, 1.0988, 1.16730009123934, 1.21590167943226, 1.2536, 1.4175, 1.3997, 1.38103909809835, 1.3582,
     1      1.27405658556683, 1.1648, 0.994, 0.8821, 0.7046, 0.5799, 0.3687, 0.1746, -0.082, -0.2821, -0.4466, -0.4344, -0.4368,
     1      -0.4433, -0.4828/
      Data a8(1:25) / -1.42, -1.42, -1.42, -1.52177662135044, -1.59398828339419, -1.65, -1.8, -1.8, -1.75053736845345, -1.69,
     1      -1.60298509365752, -1.49, -1.3, -1.18, -0.98, -0.82, -0.54, -0.34, -0.05, 0.12, 0.3, 0.3, 0.3, 0.3, 0.3/
      Data a15(1:25) / 0.9969, 0.9969, 0.9969, 1.04384999793601, 1.07716155160054, 1.103, 1.2732, 1.3042, 1.28432501532402, 1.26,
     1      1.24390224232664, 1.223, 1.16, 1.05, 0.8, 0.662, 0.48, 0.33, 0.31, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3/
      Data a16(1:25) / -1, -1, -1, -1.07965126888296, -1.13616474352589, -1.18, -1.36, -1.36, -1.33302038279279, -1.3,
     1      -1.27824627341438, -1.25, -1.17, -1.06, -0.78, -0.62, -0.34, -0.14, 0, 0, 0, 0, 0, 0, 0/
      data dC1_itf / 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.14, 0.1, 0.04, 0,
     1      -0.06, -0.1, -0.2, -0.2, -0.2, -0.2, -0.2/
      data dC1_itb / -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3,
     1      -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3/
      data sigs / 0.542501761866534, 0.542540910308792, 0.542470428435724, 0.54743357078777, 0.560177645077094,
     1      0.580620973270876, 0.612843122153575, 0.620992129840455, 0.614264074899902, 0.598009282996332, 0.597938396739046,
     1      0.580250693487794, 0.573346409650175, 0.568315874508338, 0.560071611406591, 0.557525852693131, 0.562785431289318,
     1      0.551292654342151, 0.553950674471151, 0.56095249410327, 0.544349805621334, 0.509976706337188, 0.480872687826229,
     1      0.436932291079628, 0.4169542202548/
      data sigt/ 0.281527305592527, 0.277210251610433, 0.276724083277789, 0.278797924083198, 0.282199550169249,
     1      0.288521475585358, 0.301771906960262, 0.303128517793669, 0.310997206167293, 0.311309354242882, 0.306684702250237,
     1      0.306967620360309, 0.318131596803571, 0.312252665780728, 0.288987070059188, 0.282316238059581, 0.303740388310018,
     1      0.322857833694789, 0.313381866051055, 0.33245875554816, 0.3640745587897, 0.37531046943687, 0.380147961119054,
     1      0.307726020206149, 0.311840210476944/

C Constant parameters            
      n = 1.18
      c = 1.88
      a3 = 0.1
      a4 = 0.9
      a5 = 0.0
      a9 = 0.4
      c4 = 10.0
      c1 = 7.8
C      a7 = 0
C      a8 = 0
C      a15 = 0
C      a16 = 0
      
C Find the requested spectral period and corresponding coefficients
      nPer = 25

C First check for the PGA case 
      if (specT .eq. 0.0) then
         i1=1
         period1 = period(i1)
         a1T = a1(i1)
         a2T = a2(i1)
         a6T = a6(i1)
         a10T = a10(i1)
         a11T = a11(i1)
         a11aT = a11a(i1)
         a12T = a12(i1)
         a13T = a13(i1)
         a14T = a14(i1)
         b_soilT = b_soil(i1)
         vLinT   = vLin(i1)
         dC1_itfT = dC1_itf(i1)
         dC1_itbT = dC1_itb(i1)
         sigtT = sigt(i1)
         sigsT = sigs(i1)
         a4aT = a4a(i1)
         a7T = a7(i1)
         a8T = a8(i1)         
         a15T = a15(i1)
         a16T = a16(i1)
         goto 1011
      endif

C   For other periods, loop over the spectral period range of the attenuation relationship.
      do i=2,nper-1
         if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
            count1 = i
            count2 = i+1
            goto 1020 
         endif
      enddo
 
C Selected spectral period is outside range defined by attenuaton model.
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
c     write statement removed for R package compliance
      return

C Interpolate the coefficients for the requested spectral period.
 1020       call S24_interp (period(count1),period(count2),a1(count1),a1(count2),
     +                   specT,a1T,iflag)
            call S24_interp (period(count1),period(count2),a2(count1),a2(count2),
     +                   specT,a2T,iflag)
            call S24_interp (period(count1),period(count2),a6(count1),a6(count2),
     +                   specT,a6T,iflag)
            call S24_interp (period(count1),period(count2),a10(count1),a10(count2),
     +                   specT,a10T,iflag)
            call S24_interp (period(count1),period(count2),a11(count1),a11(count2),
     +                   specT,a11T,iflag)
            call S24_interp (period(count1),period(count2),a11a(count1),a11a(count2),
     +                   specT,a11aT,iflag)
            call S24_interp (period(count1),period(count2),a12(count1),a12(count2),
     +                   specT,a12T,iflag)
            call S24_interp (period(count1),period(count2),a13(count1),a13(count2),
     +                   specT,a13T,iflag)
            call S24_interp (period(count1),period(count2),a14(count1),a14(count2),
     +                   specT,a14T,iflag)
            call S24_interp (period(count1),period(count2),b_soil(count1),b_soil(count2),
     +                   specT,b_soilT,iflag)
            call S24_interp (period(count1),period(count2),vLin(count1),vLin(count2),
     +                   specT,vLinT,iflag)
            call S24_interp (period(count1),period(count2),dC1_itf(count1),dC1_itf(count2),
     +                   specT,dC1_itfT,iflag)
            call S24_interp (period(count1),period(count2),dC1_itb(count1),dC1_itb(count2),
     +                   specT,dC1_itbT,iflag)
            call S24_interp (period(count1),period(count2),sigs(count1),sigs(count2),
     +                   specT,sigsT,iflag)
            call S24_interp (period(count1),period(count2),sigt(count1),sigt(count2),
     +                   specT,sigtT,iflag)
            call S24_interp (period(count1),period(count2),a4a(count1),a4a(count2),
     +                   specT,a4aT,iflag)
            call S24_interp (period(count1),period(count2),a7(count1),a7(count2),
     +                   specT,a7T,iflag)
            call S24_interp (period(count1),period(count2),a8(count1),a8(count2),
     +                   specT,a8T,iflag)
            call S24_interp (period(count1),period(count2),a15(count1),a15(count2),
     +                   specT,a15T,iflag)
            call S24_interp (period(count1),period(count2),a16(count1),a16(count2),
     +                   specT,a16T,iflag)

 1011 period1 = specT                                                                                                              

C 2018/09/04 coef a6 revised
C       if( a6T > 0.0 ) then
C          a6T = 0.0
C       endif		  
C 2018/09/11 cancelled
C     Compute the R term and base model based on either Rupture Distance 
c         (Interface events) of Hypocentral distance (Intraslab events). 
      if (ftype .eq. 0.0) then
         deltaC1 = dC1_itfT
         R = rRup + c4*exp( (mag-6.0)*a9 ) 
         base = a1T + a4*deltaC1 + (a2T + a14T*ftype + a3*(mag - 7.8))*alog(R) + a6T*rRup + a10T*ftype
      elseif (ftype .eq. 1.0) then
         deltaC1 = dC1_itbT
         R = disthypo + c4*exp( (mag-6.0)*a9 ) 
         base = a1T + a4*deltaC1 + (a2T + a14T*ftype + a3*(mag - 7.8))*alog(R) + a6T*disthypo + a10T*ftype
      else
c     write statement removed for R package compliance
c     write statement removed for R package compliance
         return
      endif
      
C     Base model for Magnitude scaling.      
      testmag = (7.8 + deltaC1)
C      if (mag .le. testmag ) then
C         fmag = a4*(mag-testmag) + a13T*(10.0-mag)**2.0
C      else
C         fmag = a5*(mag-testmag) + a13T*(10.0-mag)**2.0
C      endif      

C     The fmag term has an additional branch for linear Mag scaling
C     new  coefficient a4a      
      if (mag .le. 5.5 ) then
         fmag = a4aT*(mag-5.5) + a4*(5.5-testmag) + a13T*(10.0-mag)**2.0
      elseif (mag .le. testmag) then
         fmag = a4*(mag-testmag)+ a13T*(10.0-mag)**2.0
      else
      	 fmag = a5*(mag-testmag)+ a13T*(10.0-mag)**2.0
      endif           
      
C     Depth Scaling
      if (ftype .eq. 0.0) then
        fdepth = a11aT*(Ztor - 20.0)
      elseif (ftype .eq. 1.0) then
C        fdepth = a11T*(depth - 60.0 )
        fdepth =  a11T*(min(depth, 80.0) -60.0 )
      else
c     write statement removed for R package compliance
c     write statement removed for R package compliance
         return
      endif

C     Forearc/Backarc scaling      
      if (ftype .eq. 1) then
         fbac =  (a7T + a8T*alog(max(disthypo,85.0)/40.0))*faba
      elseif (ftype .eq. 0) then   
         fbac =  (a15T + a16T*alog(max(rRup,100.0)/40.0))*faba
      endif 

C     Site Response 
      if (vs30 .ge. 1000.0) then
          VsStar = 1000.0
      else
          VsStar = vs30
      endif
       
      if (vs30 .ge. VlinT) then
         fsite = a12T*alog(VsStar/vLinT) + b_soilT*n*alog(VsStar/vLinT)
      else
         fsite = a12T*alog(VsStar/vLinT) - b_soilT*alog(pgarock + c) +
     1          b_soilT*alog(pgarock + c*(VsStar/vlinT)**n)     
      endif

      sumgm = base + fmag + fdepth + fsite
c      write(*,*) "deltaC1 = ", deltaC1
c      write(*,*) "testmag = ", testmag
c      write(*,*) "base = ", base
c      write(*,*) "fmag = ", fmag
c      write(*,*) "fdepth = ", fdepth
c      write(*,*) "fsite = ", fsite
c      write(*,*) "lnYSa = ", sumgm
c      write(*,*) "Sa = ", exp(sumgm) 
	  
C     Set sigma values to return
      sigma = sigsT
      tau = sigtT

c     Set SA to return
      lnSa = sumgm

      return
      end
c ------------------------------------------------------------------
C *** Adjusted Lin and Lee (2008) Horizontal for Subduction Zones, ****
c ------------------------------------------------------------------

      subroutine S04_LL08_F04 ( mag, rupdist, specT, period, lnY, sigma,
     1  iflag, Ztor, ftype, vs30)

      implicit none

      integer MAXPER, nPer, i
      parameter (MAXPER=23)
      real mag, rupDist, lnY, sigma, period
      real ftype, vs30, Ztor, fmag, fztor
      real c1(MAXPER), c2(MAXPER), c3(MAXPER), c6(MAXPER), c4(MAXPER), c7(MAXPER),
     1     c8(MAXPER), c9(MAXPER), c11(MAXPER), c8a(MAXPER), c8b(MAXPER)
      real specT, c1T, c2T, c3T, c4T, c5, c6T, c7T, c8T, c9T, c10, c11T, sigT, c8aT, c8bT
      integer count1, count2, iflag
      real period1(MAXPER), sig(MAXPER)

      Data period1 / 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.075, 0.1, 0.12, 0.15, 0.17, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3,
     1      4, 5/
      Data c1 / 0.251917569769788, 0.251917569769788, 0.184928810489714, -0.00356699594929908, -0.116139847179393,
     1      -0.359205997670388, -0.618494316568272, 0.0248887792514275, 0.316179568518992, 0.355069600474626, 0.324182771381062,
     1      0.244285329050222, -0.850876179346134, -2.03266332645047, -3.55038622993569, -4.33158184045748, -6.1861295462799,
     1      -8.07773284436953, -9.59355609932776, -10.2410101192885, -11.8197430743799, -12.3899805660359, -11.2967044082474/
      Data c2 / 1.205, 1.205, 1.2, 1.155, 1.1, 1.09, 1.040234713, 1, 1.04, 1.045, 1.065, 1.085, 1.125123456, 1.215, 1.285, 1.365,
     1      1.465, 1.62, 1.705, 1.77, 1.83, 1.845, 1.805/
      Data c3 / -1.895, -1.895, -1.88, -1.875, -1.86, -1.855, -1.826241507, -1.795, -1.77, -1.73, -1.71, -1.675, -1.61902357,
     1      -1.57, -1.5, -1.465, -1.45, -1.45, -1.44, -1.43, -1.37, -1.26, -1.135/
      Data c6 / 0.0190085489909667, 0.0190085489909667, 0.0185931283145121, 0.0180754695677972, 0.0171797889011337,
     1      0.0167193132892576, 0.0164094510351137, 0.0156026600924293, 0.015593690561164, 0.0157954136494296, 0.015862378077345,
     1      0.0157281115774864, 0.0156001059686599, 0.0153175632854892, 0.017301105547853, 0.017252423599451, 0.0168567176022536,
     1      0.0156338216453473, 0.0163600126300559, 0.0152530865748235, 0.0101434708937324, 0.00763487493439363,
     1      0.00532464316318695/
      Data c8 / 1.29844688061264, 1.29844688061264, 1.2835194865868, 1.26799743889615, 1.23822332712607, 1.21958036706955,
     1      1.14922912205638, 1.10227413787241, 1.1108672551511, 1.11259460482704, 1.12053373611138, 1.13907016871582,
     1      1.13672583329478, 1.13371267626325, 1.12842094617372, 1.19344814904958, 1.37332618873098, 1.46401067034632,
     1      1.66265594663281, 1.72311049113089, 1.85023182441134, 1.91072173395565, 1.86912098319861/
      Data c9 / 0.0486333778494577, 0.0486333778494577, 0.0482154946217135, 0.0475826239873693, 0.0475694652133262,
     1      0.0474481959420581, 0.0479124556154867, 0.0501970201626954, 0.0506450856670888, 0.0494002298939118, 0.0502381974755613,
     1      0.0489867406047882, 0.049890773264954, 0.049003637866689, 0.0441952205455153, 0.041048694342018, 0.0307131546663227,
     1      0.0231171395193354, 0.0203770597524757, 0.0167666379486008, 0.00812986804206466, 0.000517797127688047,
     1      0.00385222909361174/
      Data c11 / -0.378053724277046, -0.378053724277046, -0.374068643626873, -0.361098846225156, -0.333731258276522,
     1      -0.303834200934664, -0.29609635351472, -0.317140653194989, -0.344785011141604, -0.39096980447971, -0.425857702744424,
     1      -0.444672585568288, -0.476617127319015, -0.504570787921981, -0.556131879476854, -0.550089918340281, -0.666683380683071,
     1      -0.693735359043865, -0.734307716172396, -0.708057413209543, -0.644740108862218, -0.603603881941717, -0.597188074861842/
      Data c4 / 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.352485413751673, 0.447854533027533,
     1      0.51552, 0.51552, 0.51552, 0.51552, 0.51552, 0.51552/
      Data c8a / 1.65355293187812, 1.65355293187812, 1.62736235457987, 1.56435667800801, 1.47706996359888, 1.37766571107588,
     1      1.27733907587263, 1.33837679454979, 1.34328098282119, 1.40599239759458, 1.47744479533333, 1.53084985739141,
     1      1.61153440302746, 1.75769420123297, 2.12165232630608, 2.35235234835414, 2.63083202918182, 2.78551811856462,
     1      3.08882658786425, 3.25257617832983, 3.08949547761579, 2.84396915436152, 2.69627621202097/
      Data c8b / 0.511622226208753, 0.511622226208753, 0.518809110964449, 0.564783626354318, 0.595527969814917, 0.664267061484588,
     1      0.74475103031188, 0.621026682547829, 0.557187053999304, 0.523473227825398, 0.513978132919416, 0.501853735087157,
     1      0.673294096714701, 0.850400204354929, 1.03499364271083, 1.11815076143448, 1.36785600868129, 1.65091170888597,
     1      1.77566937710392, 1.77458455729069, 1.89622633793847, 1.82000048123534, 1.41926944323687/
      Data sig / 0.5218, 0.5218, 0.5189, 0.5235, 0.5352, 0.537, 0.569479308, 0.5806, 0.5748, 0.5817, 0.5906, 0.6059, 0.637738271,
     1      0.6656, 0.7105, 0.7145, 0.7689, 0.7983, 0.8411, 0.8766, 0.859, 0.8055, 0.7654/
      Data c7 /-0.023024774, -0.023024774, -0.009555338, 0.023863931, 0.078064967, 0.123007013, 0.191175881, 0.238934319,
     1         0.214408068, 0.183558925, 0.127185951, 0.038416195, -0.073966903, -0.136315954, -0.243353466, -0.341654652,
     1         -0.48202467, -0.510018746, -0.559795963, -0.57197707, -0.441301253, -0.380235394, -0.321436112/


C Find the requested spectral period and corresponding coefficients
      nPer = 23

C First check for the PGA case (i.e., specT=0.0)
      if (specT .eq. 0.0) then
         period  = period1(1)
         c1T     = c1(1)
         c2T     = c2(1)
         c3T     = c3(1)
         c6T     = c6(1)
         c8T     = c8(1)
         c9T     = c9(1)
C         c10T    = c10(1)
         c11T    = c11(1)
         sigT    = sig(1)
         c8aT     = c8a(1)
         c8bT     = c8b(1)
         c7T     = c7(1)
         c4T     = c4(1)
         goto 1011
      elseif (specT .ne. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=2,nper-1
            if (specT .ge. period1(i) .and. specT .le. period1(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020
            endif
         enddo
      endif

C      write (*,*)
C      write (*,*) 'Lin and Lee (2008) Sub-Hor. Adjusted atttenuation model'
C      write (*,*) 'is not defined for a spectral period of: '
C      write (*,*)') ' Period = ',specT
C      write (*,*) 'This spectral period is outside the defined'
C      write (*,*) 'period range in the code or beyond the range'
C      write (*,*) 'of spectral periods for interpolation.'
C      write (*,*) 'Please check the input file.'
C      write (*,*)
      return

C Interpolate the coefficients for the requested spectral period.
 1020 call S24_interp (period1(count1),period1(count2),c1(count1),c1(count2),
     +             specT,c1T,iflag)
      call S24_interp (period1(count1),period1(count2),c2(count1),c2(count2),
     +             specT,c2T,iflag)
      call S24_interp (period1(count1),period1(count2),c3(count1),c3(count2),
     +             specT,c3T,iflag)
      call S24_interp (period1(count1),period1(count2),c6(count1),c6(count2),
     +             specT,c6T,iflag)
      call S24_interp (period1(count1),period1(count2),c8(count1),c8(count2),
     +             specT,c8T,iflag)
      call S24_interp (period1(count1),period1(count2),c9(count1),c9(count2),
     +             specT,c9T,iflag)
c      call S24_interp (period1(count1),period1(count2),c10(count1),c10(count2),
c     +             specT,c10T,iflag)
      call S24_interp (period1(count1),period1(count2),c11(count1),c11(count2),
     +             specT,c11T,iflag)
      call S24_interp (period1(count1),period1(count2),sig(count1),sig(count2),
     +             specT,sigT,iflag)
      call S24_interp (period1(count1),period1(count2),c8a(count1),c8a(count2),
     +             specT,c8aT,iflag)
      call S24_interp (period1(count1),period1(count2),c8b(count1),c8b(count2),
     +             specT,c8bT,iflag)
      call S24_interp (period1(count1),period1(count2),c4(count1),c4(count2),
     +             specT,c4T,iflag)
      call S24_interp (period1(count1),period1(count2),c7(count1),c7(count2),
     +             specT,c7T,iflag)

 1011 period = specT

C     Compute the ground motions.
C      c4 = 0.51552
      c5 = 0.63255
C      c7 = 0.275
      c10 = 0   !This effectively removes the fattn term.

      if (mag .le. 5.0) then
      	fmag = c8bT * mag
      elseif (mag .le. 5.5) then
        fmag = c8aT*(mag) + (c8bT-c8aT)*5.0
      elseif (mag .le. 7.5) then
        fmag = c8T * mag + (c8bT-c8aT)*5.0 + (c8aT-c8T)*5.5
      else
        fmag = c2T*(mag) + (c8bT-c8aT)*5.0 + (c8aT-c8T)*5.5 + (c8T-c2T)*7.5
      endif

      if (ftype .eq. 0) then
      	fztor = c9T*(min(Ztor, 30.0) - 20.0)
      else
        fztor = c6T*(min(Ztor, 80.0) - 20.0)
      endif

      lnY = c1T + fmag + c3T*alog(Rupdist+c4T*exp(c5*mag)) +
     1      c7T*ftype + fztor + c10*Rupdist + c11T*alog(Vs30/760.0)


      sigma = sigT

C     Now convert to Ln Units in gals.
      lnY = lnY + 6.89

      return
      end



